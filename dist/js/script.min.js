/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "js/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/js/controller/index.js":
/*!************************************!*\
  !*** ./app/js/controller/index.js ***!
  \************************************/
/*! exports provided: app */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"app\", function() { return app; });\n/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view */ \"./app/js/view/index.js\");\n/* harmony import */ var _noUiSlidersInit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./noUiSlidersInit */ \"./app/js/controller/noUiSlidersInit.js\");\n/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model */ \"./app/js/model/index.js\");\n\n\n\nvar app = {\n  init: function init() {\n    this.sliders();\n    this.observeDimentions();\n    this.observeSliders();\n  },\n  sliders: function sliders() {\n    window.addEventListener('load', function () {\n      if (this.innerWidth > 576) {\n        _noUiSlidersInit__WEBPACK_IMPORTED_MODULE_1__[\"default\"].callSliders('vertical', 'rtl');\n      } else {\n        _noUiSlidersInit__WEBPACK_IMPORTED_MODULE_1__[\"default\"].callSliders('horizontal', 'ltr');\n      }\n    });\n    window.addEventListener('load', function () {\n      Object(_model__WEBPACK_IMPORTED_MODULE_2__[\"calcSliderSum\"])(_view__WEBPACK_IMPORTED_MODULE_0__[\"sliders\"], _view__WEBPACK_IMPORTED_MODULE_0__[\"sliders4\"]);\n      Object(_model__WEBPACK_IMPORTED_MODULE_2__[\"calcSliderSum\"])(_view__WEBPACK_IMPORTED_MODULE_0__[\"sliders\"], _view__WEBPACK_IMPORTED_MODULE_0__[\"sliders5\"]);\n    });\n  },\n  observeDimentions: function observeDimentions() {\n    Object(_model__WEBPACK_IMPORTED_MODULE_2__[\"observeDimentions\"])({\n      select: _view__WEBPACK_IMPORTED_MODULE_0__[\"select\"]\n    });\n  },\n  observeSliders: function observeSliders() {\n    window.addEventListener('load', function () {\n      Object(_model__WEBPACK_IMPORTED_MODULE_2__[\"observeSliders\"])({\n        sliders: _view__WEBPACK_IMPORTED_MODULE_0__[\"sliders\"]\n      });\n    });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29udHJvbGxlci9pbmRleC5qcz9kZmM2Il0sIm5hbWVzIjpbImFwcCIsImluaXQiLCJzbGlkZXJzIiwib2JzZXJ2ZURpbWVudGlvbnMiLCJvYnNlcnZlU2xpZGVycyIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbm5lcldpZHRoIiwiSW5pdFNsaWRlcnMiLCJjYWxsU2xpZGVycyIsImNhbGNTbGlkZXJTdW0iLCJzbGlkZXJzNCIsInNsaWRlcnM1Iiwic2VsZWN0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBT0EsSUFBTUEsR0FBRyxHQUFHO0FBQ1hDLE1BRFcsa0JBQ0o7QUFDTixTQUFLQyxPQUFMO0FBQ0EsU0FBS0MsaUJBQUw7QUFDQSxTQUFLQyxjQUFMO0FBQ0EsR0FMVTtBQU9YRixTQVBXLHFCQU9GO0FBRVJHLFVBQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0IsTUFBeEIsRUFBZ0MsWUFBVTtBQUN6QyxVQUFHLEtBQUtDLFVBQUwsR0FBa0IsR0FBckIsRUFBMEI7QUFDekJDLGdFQUFXLENBQUNDLFdBQVosQ0FBd0IsVUFBeEIsRUFBb0MsS0FBcEM7QUFDQSxPQUZELE1BRU87QUFDTkQsZ0VBQVcsQ0FBQ0MsV0FBWixDQUF3QixZQUF4QixFQUFzQyxLQUF0QztBQUNBO0FBQ0QsS0FORDtBQVFBSixVQUFNLENBQUNDLGdCQUFQLENBQXdCLE1BQXhCLEVBQWdDLFlBQVU7QUFDekNJLGtFQUFhLENBQUNSLDZDQUFELEVBQVVTLDhDQUFWLENBQWI7QUFDQUQsa0VBQWEsQ0FBQ1IsNkNBQUQsRUFBVVUsOENBQVYsQ0FBYjtBQUNBLEtBSEQ7QUFPQSxHQXhCVTtBQTBCWFQsbUJBMUJXLCtCQTBCUTtBQUNsQkEsb0VBQWlCLENBQUM7QUFBQ1UsWUFBTSxFQUFOQSw0Q0FBTUE7QUFBUCxLQUFELENBQWpCO0FBQ0EsR0E1QlU7QUE2QlhULGdCQTdCVyw0QkE2Qks7QUFDZkMsVUFBTSxDQUFDQyxnQkFBUCxDQUF3QixNQUF4QixFQUFnQyxZQUFVO0FBQ3pDRixtRUFBYyxDQUFDO0FBQUNGLGVBQU8sRUFBUEE7QUFBRCxPQUFELENBQWQ7QUFDQSxLQUZEO0FBSUE7QUFsQ1UsQ0FBWiIsImZpbGUiOiIuL2FwcC9qcy9jb250cm9sbGVyL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2xpZGVycywgc2xpZGVyczQsIHNsaWRlcnM1LCBzZWxlY3QsIGN1cnJJbnB1dH0gZnJvbSAnLi4vdmlldydcclxuaW1wb3J0IEluaXRTbGlkZXJzIGZyb20gJy4vbm9VaVNsaWRlcnNJbml0J1xyXG5pbXBvcnQge1xyXG5cdGNhbGNTbGlkZXJTdW0sXHJcblx0b2JzZXJ2ZURpbWVudGlvbnMsXHJcblx0b2JzZXJ2ZVNsaWRlcnNcclxufSBmcm9tICcuLi9tb2RlbCdcclxuXHJcblxyXG5jb25zdCBhcHAgPSB7XHJcblx0aW5pdCgpIHtcclxuXHRcdHRoaXMuc2xpZGVycygpO1xyXG5cdFx0dGhpcy5vYnNlcnZlRGltZW50aW9ucygpXHJcblx0XHR0aGlzLm9ic2VydmVTbGlkZXJzKClcclxuXHR9LFxyXG5cclxuXHRzbGlkZXJzKCl7XHJcblxyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbigpe1xyXG5cdFx0XHRpZih0aGlzLmlubmVyV2lkdGggPiA1NzYpIHtcclxuXHRcdFx0XHRJbml0U2xpZGVycy5jYWxsU2xpZGVycygndmVydGljYWwnLCAncnRsJylcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRJbml0U2xpZGVycy5jYWxsU2xpZGVycygnaG9yaXpvbnRhbCcsICdsdHInKVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cclxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24oKXtcclxuXHRcdFx0Y2FsY1NsaWRlclN1bShzbGlkZXJzLCBzbGlkZXJzNClcclxuXHRcdFx0Y2FsY1NsaWRlclN1bShzbGlkZXJzLCBzbGlkZXJzNSlcclxuXHRcdH0pXHJcblxyXG5cclxuXHRcdFxyXG5cdH0sXHJcblxyXG5cdG9ic2VydmVEaW1lbnRpb25zKCl7XHJcblx0XHRvYnNlcnZlRGltZW50aW9ucyh7c2VsZWN0fSlcclxuXHR9LFxyXG5cdG9ic2VydmVTbGlkZXJzKCl7XHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCl7XHJcblx0XHRcdG9ic2VydmVTbGlkZXJzKHtzbGlkZXJzfSlcclxuXHRcdH0pXHJcblxyXG5cdH1cclxuXHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IHtcclxuXHRhcHBcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/js/controller/index.js\n");

/***/ }),

/***/ "./app/js/controller/noUiSlidersInit.js":
/*!**********************************************!*\
  !*** ./app/js/controller/noUiSlidersInit.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return InitSliders; });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _libs_libs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../libs/libs */ \"./app/libs/libs.js\");\n/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../view */ \"./app/js/view/index.js\");\n\n\n\n\n\nvar InitSliders = /*#__PURE__*/function () {\n  function InitSliders() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, InitSliders);\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(InitSliders, null, [{\n    key: \"__initSliders\",\n    value: function __initSliders(el) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$start = _ref.start,\n          start = _ref$start === void 0 ? 0 : _ref$start,\n          _ref$connect = _ref.connect,\n          connect = _ref$connect === void 0 ? 'lower' : _ref$connect,\n          _ref$orientation = _ref.orientation,\n          orientation = _ref$orientation === void 0 ? 'vertical' : _ref$orientation,\n          _ref$direction = _ref.direction,\n          direction = _ref$direction === void 0 ? 'rtl' : _ref$direction,\n          _ref$tooltips = _ref.tooltips,\n          tooltips = _ref$tooltips === void 0 ? [Object(_libs_libs__WEBPACK_IMPORTED_MODULE_2__[\"wNumb\"])({\n        decimals: 0,\n        suffix: '%'\n      })] : _ref$tooltips,\n          _ref$pips = _ref.pips,\n          pips = _ref$pips === void 0 ? {\n        mode: 'range',\n        density: this,\n        format: Object(_libs_libs__WEBPACK_IMPORTED_MODULE_2__[\"wNumb\"])({\n          suffix: '%'\n        })\n      } : _ref$pips,\n          _ref$range = _ref.range,\n          range = _ref$range === void 0 ? {\n        'min': 20,\n        'max': 100\n      } : _ref$range;\n\n      _libs_libs__WEBPACK_IMPORTED_MODULE_2__[\"noUiSlider\"].create(el, {\n        start: start,\n        connect: connect,\n        orientation: orientation,\n        direction: direction,\n        tooltips: tooltips,\n        pips: pips,\n        range: range\n      });\n    }\n  }, {\n    key: \"callSliders\",\n    value: function callSliders(orientation, direction) {\n      var _this = this;\n\n      _view__WEBPACK_IMPORTED_MODULE_3__[\"sliders\"].forEach(function (el) {\n        if (el.classList.contains('percent-slider')) {\n          _this.__initSliders(el, {\n            orientation: orientation,\n            direction: direction\n          }); // console.log(el.noUiSlider)\n\n        } else if (el.classList.contains('percent-slider-2')) {\n          _this.__initSliders(el, {\n            range: {\n              min: 5,\n              max: 25\n            },\n            start: 0,\n            orientation: orientation,\n            direction: direction\n          });\n        } else if (el.classList.contains('percent-slider-3')) {\n          _this.__initSliders(el, {\n            range: {\n              min: 0,\n              max: 50\n            },\n            start: 0,\n            orientation: orientation,\n            direction: direction\n          });\n        } else if (el.classList.contains('absolute-slider')) {\n          _this.__initSliders(el, {\n            range: {\n              min: 0,\n              max: 300\n            },\n            start: 0,\n            tooltips: [Object(_libs_libs__WEBPACK_IMPORTED_MODULE_2__[\"wNumb\"])({\n              decimals: 0,\n              suffix: 'тыс.р'\n            })],\n            pips: null,\n            orientation: orientation,\n            direction: direction\n          });\n\n          var maxSumm = el.querySelector('.slider-area__max-value .slider-area__summ');\n          var minSumm = el.querySelector('.slider-area__min-value .slider-area__summ');\n          var maxCurrency = el.querySelector('.slider-area__max-value .slider-area__currency');\n          var minCurrency = el.querySelector('.slider-area__min-value .slider-area__currency');\n          maxSumm.textContent = el.noUiSlider.options.range.max;\n          minSumm.textContent = el.noUiSlider.options.range.min;\n          minCurrency.textContent = maxCurrency.textContent = 'тыс.р';\n        } else if (el.classList.contains('absolute-slider-2')) {\n          _this.__initSliders(el, {\n            range: {\n              min: 0,\n              max: 50\n            },\n            start: 0,\n            tooltips: [Object(_libs_libs__WEBPACK_IMPORTED_MODULE_2__[\"wNumb\"])({\n              decimals: 0,\n              suffix: 'тыс.р'\n            })],\n            pips: null,\n            orientation: orientation,\n            direction: direction\n          });\n\n          var _maxSumm = el.querySelector('.slider-area__max-value .slider-area__summ');\n\n          var _minSumm = el.querySelector('.slider-area__min-value .slider-area__summ');\n\n          var _maxCurrency = el.querySelector('.slider-area__max-value .slider-area__currency');\n\n          var _minCurrency = el.querySelector('.slider-area__min-value .slider-area__currency');\n\n          _maxSumm.textContent = el.noUiSlider.options.range.max;\n          _minSumm.textContent = el.noUiSlider.options.range.min;\n          _minCurrency.textContent = _maxCurrency.textContent = 'тыс.р';\n        }\n      });\n    }\n  }]);\n\n  return InitSliders;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/js/controller/noUiSlidersInit.js\n");

/***/ }),

/***/ "./app/js/main.js":
/*!************************!*\
  !*** ./app/js/main.js ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controller */ \"./app/js/controller/index.js\");\n;\n\n\nif (document.readyState !== 'loading') {\n  _controller__WEBPACK_IMPORTED_MODULE_0__[\"app\"].init();\n} else {\n  document.addEventListener('DOMContentLoaded', function () {\n    _controller__WEBPACK_IMPORTED_MODULE_0__[\"app\"].init();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbWFpbi5qcz80M2M0Il0sIm5hbWVzIjpbImRvY3VtZW50IiwicmVhZHlTdGF0ZSIsImFwcCIsImluaXQiLCJhZGRFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQzs7QUFFRCxJQUFJQSxRQUFRLENBQUNDLFVBQVQsS0FBd0IsU0FBNUIsRUFBd0M7QUFDcENDLGlEQUFHLENBQUNDLElBQUo7QUFDSCxDQUZELE1BRU87QUFDSEgsVUFBUSxDQUFDSSxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsWUFBWTtBQUN0REYsbURBQUcsQ0FBQ0MsSUFBSjtBQUNILEdBRkQ7QUFHSCIsImZpbGUiOiIuL2FwcC9qcy9tYWluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiO2ltcG9ydCB7YXBwfSBmcm9tICcuL2NvbnRyb2xsZXInXHJcblxyXG5pZiggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2xvYWRpbmcnICkge1xyXG4gICAgYXBwLmluaXQoKTtcclxufSBlbHNlIHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXBwLmluaXQoKTtcclxuICAgIH0pO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/main.js\n");

/***/ }),

/***/ "./app/js/model/Observer.js":
/*!**********************************!*\
  !*** ./app/js/model/Observer.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return EventObserver; });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nvar EventObserver = /*#__PURE__*/function () {\n  function EventObserver() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, EventObserver);\n\n    this.observers = [];\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(EventObserver, [{\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      this.observers.push(fn);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(fn) {\n      this.observers = this.observers.filter(function (subscriber) {\n        return subscriber !== fn;\n      });\n    }\n  }, {\n    key: \"broadcast\",\n    value: function broadcast(_ref) {\n      var data = _ref.data,\n          _ref$param = _ref.param,\n          param = _ref$param === void 0 ? \"\" : _ref$param;\n      this.observers.forEach(function (subscriber) {\n        return subscriber(data, param);\n      });\n    }\n  }]);\n\n  return EventObserver;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvT2JzZXJ2ZXIuanM/ZWNlMyJdLCJuYW1lcyI6WyJFdmVudE9ic2VydmVyIiwib2JzZXJ2ZXJzIiwiZm4iLCJwdXNoIiwiZmlsdGVyIiwic3Vic2NyaWJlciIsImRhdGEiLCJwYXJhbSIsImZvckVhY2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztJQUFxQkEsYTtBQUNuQiwyQkFBYztBQUFBOztBQUNiLFNBQUtDLFNBQUwsR0FBaUIsRUFBakI7QUFDQTs7Ozs4QkFFU0MsRSxFQUFJO0FBQ2IsV0FBS0QsU0FBTCxDQUFlRSxJQUFmLENBQW9CRCxFQUFwQjtBQUNBOzs7Z0NBRVdBLEUsRUFBSTtBQUNmLFdBQUtELFNBQUwsR0FBaUIsS0FBS0EsU0FBTCxDQUFlRyxNQUFmLENBQXNCLFVBQUNDLFVBQUQ7QUFBQSxlQUFnQkEsVUFBVSxLQUFLSCxFQUEvQjtBQUFBLE9BQXRCLENBQWpCO0FBQ0E7OztvQ0FFNkI7QUFBQSxVQUFuQkksSUFBbUIsUUFBbkJBLElBQW1CO0FBQUEsNEJBQWJDLEtBQWE7QUFBQSxVQUFiQSxLQUFhLDJCQUFMLEVBQUs7QUFDN0IsV0FBS04sU0FBTCxDQUFlTyxPQUFmLENBQXVCLFVBQUNILFVBQUQ7QUFBQSxlQUFnQkEsVUFBVSxDQUFDQyxJQUFELEVBQU9DLEtBQVAsQ0FBMUI7QUFBQSxPQUF2QjtBQUNBIiwiZmlsZSI6Ii4vYXBwL2pzL21vZGVsL09ic2VydmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRPYnNlcnZlciB7XHJcblx0XHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdFx0dGhpcy5vYnNlcnZlcnMgPSBbXTtcclxuXHRcdH1cclxuXHJcblx0XHRzdWJzY3JpYmUoZm4pIHtcclxuXHRcdFx0dGhpcy5vYnNlcnZlcnMucHVzaChmbik7XHJcblx0XHR9XHJcblxyXG5cdFx0dW5zdWJzY3JpYmUoZm4pIHtcclxuXHRcdFx0dGhpcy5vYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycy5maWx0ZXIoKHN1YnNjcmliZXIpID0+IHN1YnNjcmliZXIgIT09IGZuKTtcclxuXHRcdH1cclxuXHJcblx0XHRicm9hZGNhc3Qoe2RhdGEsIHBhcmFtID0gXCJcIn0pIHtcclxuXHRcdFx0dGhpcy5vYnNlcnZlcnMuZm9yRWFjaCgoc3Vic2NyaWJlcikgPT4gc3Vic2NyaWJlcihkYXRhLCBwYXJhbSkpO1xyXG5cdFx0fVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/model/Observer.js\n");

/***/ }),

/***/ "./app/js/model/broadcastDimension.js":
/*!********************************************!*\
  !*** ./app/js/model/broadcastDimension.js ***!
  \********************************************/
/*! exports provided: observeDimentions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"observeDimentions\", function() { return observeDimentions; });\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Observer */ \"./app/js/model/Observer.js\");\n/* harmony import */ var _libs_libs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../libs/libs */ \"./app/libs/libs.js\");\n/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../view */ \"./app/js/view/index.js\");\n\n\n\n\n\nvar observeDimentions = function observeDimentions(_ref) {\n  var select = _ref.select;\n  var dimentionObserver = new _Observer__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n  dimentionObserver.subscribe(subscribeSliderCurrencyValue);\n  dimentionObserver.subscribe(subscribeSliderTooltip);\n  select.addEventListener('change', function () {\n    dimentionObserver.broadcast({\n      data: this.value\n    });\n  }); // currInput.addEventListener('change', function(){\n  // \tdimentionObserver.broadcast({param: this.value});\n  // })\n};\n\nfunction subscribeSliderCurrencyValue(value, param) {\n  console.log(param);\n  console.log(value);\n  _view__WEBPACK_IMPORTED_MODULE_3__[\"maxValue\"].forEach(function (el) {\n    el.textContent = value;\n  });\n  _view__WEBPACK_IMPORTED_MODULE_3__[\"minValue\"].forEach(function (el) {\n    el.textContent = value;\n  });\n}\n\nfunction subscribeSliderTooltip(value) {\n  [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(_view__WEBPACK_IMPORTED_MODULE_3__[\"sliders4\"]), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(_view__WEBPACK_IMPORTED_MODULE_3__[\"sliders5\"])).forEach(function (el) {\n    el.noUiSlider.updateOptions({\n      tooltips: [Object(_libs_libs__WEBPACK_IMPORTED_MODULE_2__[\"wNumb\"])({\n        decimals: 0,\n        suffix: value\n      })]\n    });\n  });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvYnJvYWRjYXN0RGltZW5zaW9uLmpzPzIyZjUiXSwibmFtZXMiOlsib2JzZXJ2ZURpbWVudGlvbnMiLCJzZWxlY3QiLCJkaW1lbnRpb25PYnNlcnZlciIsIkV2ZW50T2JzZXJ2ZXIiLCJzdWJzY3JpYmUiLCJzdWJzY3JpYmVTbGlkZXJDdXJyZW5jeVZhbHVlIiwic3Vic2NyaWJlU2xpZGVyVG9vbHRpcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJicm9hZGNhc3QiLCJkYXRhIiwidmFsdWUiLCJwYXJhbSIsImNvbnNvbGUiLCJsb2ciLCJtYXhWYWx1ZSIsImZvckVhY2giLCJlbCIsInRleHRDb250ZW50IiwibWluVmFsdWUiLCJzbGlkZXJzNCIsInNsaWRlcnM1Iiwibm9VaVNsaWRlciIsInVwZGF0ZU9wdGlvbnMiLCJ0b29sdGlwcyIsIndOdW1iIiwiZGVjaW1hbHMiLCJzdWZmaXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFFQTtBQUVBOztBQUtBLElBQU1BLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsT0FBZTtBQUFBLE1BQVpDLE1BQVksUUFBWkEsTUFBWTtBQUd4QyxNQUFJQyxpQkFBaUIsR0FBRyxJQUFJQyxpREFBSixFQUF4QjtBQUNBRCxtQkFBaUIsQ0FBQ0UsU0FBbEIsQ0FBNEJDLDRCQUE1QjtBQUNBSCxtQkFBaUIsQ0FBQ0UsU0FBbEIsQ0FBNEJFLHNCQUE1QjtBQUdBTCxRQUFNLENBQUNNLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLFlBQVU7QUFDM0NMLHFCQUFpQixDQUFDTSxTQUFsQixDQUE0QjtBQUFDQyxVQUFJLEVBQUUsS0FBS0M7QUFBWixLQUE1QjtBQUNBLEdBRkQsRUFSd0MsQ0FZeEM7QUFDQTtBQUNBO0FBRUEsQ0FoQkQ7O0FBbUJBLFNBQVNMLDRCQUFULENBQXNDSyxLQUF0QyxFQUE2Q0MsS0FBN0MsRUFBbUQ7QUFDbERDLFNBQU8sQ0FBQ0MsR0FBUixDQUFZRixLQUFaO0FBQ0FDLFNBQU8sQ0FBQ0MsR0FBUixDQUFZSCxLQUFaO0FBQ0FJLGdEQUFRLENBQUNDLE9BQVQsQ0FBaUIsVUFBQUMsRUFBRSxFQUFHO0FBQ3JCQSxNQUFFLENBQUNDLFdBQUgsR0FBaUJQLEtBQWpCO0FBQ0EsR0FGRDtBQUdBUSxnREFBUSxDQUFDSCxPQUFULENBQWlCLFVBQUFDLEVBQUUsRUFBRztBQUNyQkEsTUFBRSxDQUFDQyxXQUFILEdBQWlCUCxLQUFqQjtBQUNBLEdBRkQ7QUFHQTs7QUFHRCxTQUFTSixzQkFBVCxDQUFnQ0ksS0FBaEMsRUFBc0M7QUFDckMsNEZBQUlTLDhDQUFKLG1GQUFpQkMsOENBQWpCLEdBQTJCTCxPQUEzQixDQUFtQyxVQUFBQyxFQUFFLEVBQUc7QUFDdkNBLE1BQUUsQ0FBQ0ssVUFBSCxDQUFjQyxhQUFkLENBQTRCO0FBQzFCQyxjQUFRLEVBQUcsQ0FBQ0Msd0RBQUssQ0FBQztBQUFDQyxnQkFBUSxFQUFFLENBQVg7QUFBY0MsY0FBTSxFQUFFaEI7QUFBdEIsT0FBRCxDQUFOO0FBRGUsS0FBNUI7QUFHQSxHQUpEO0FBTUEiLCJmaWxlIjoiLi9hcHAvanMvbW9kZWwvYnJvYWRjYXN0RGltZW5zaW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV2ZW50T2JzZXJ2ZXIgZnJvbSAnLi9PYnNlcnZlcidcclxuXHJcbmltcG9ydCB7IG5vVWlTbGlkZXIsIHdOdW1iIH0gZnJvbSAnLi4vLi4vbGlicy9saWJzJ1xyXG5cclxuaW1wb3J0IHttYXhWYWx1ZSwgbWluVmFsdWUsIHNsaWRlcnM0LCBzbGlkZXJzNX0gZnJvbSAnLi4vdmlldydcclxuXHJcblxyXG5cclxuXHJcbmNvbnN0IG9ic2VydmVEaW1lbnRpb25zID0gKHsgc2VsZWN0IH0pPT4ge1xyXG5cclxuXHJcblx0bGV0IGRpbWVudGlvbk9ic2VydmVyID0gbmV3IEV2ZW50T2JzZXJ2ZXIoKVxyXG5cdGRpbWVudGlvbk9ic2VydmVyLnN1YnNjcmliZShzdWJzY3JpYmVTbGlkZXJDdXJyZW5jeVZhbHVlKVxyXG5cdGRpbWVudGlvbk9ic2VydmVyLnN1YnNjcmliZShzdWJzY3JpYmVTbGlkZXJUb29sdGlwKVxyXG5cclxuXHJcblx0c2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKCl7XHJcblx0XHRkaW1lbnRpb25PYnNlcnZlci5icm9hZGNhc3Qoe2RhdGE6IHRoaXMudmFsdWV9KTtcclxuXHR9KVxyXG5cclxuXHQvLyBjdXJySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oKXtcclxuXHQvLyBcdGRpbWVudGlvbk9ic2VydmVyLmJyb2FkY2FzdCh7cGFyYW06IHRoaXMudmFsdWV9KTtcclxuXHQvLyB9KVxyXG5cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHN1YnNjcmliZVNsaWRlckN1cnJlbmN5VmFsdWUodmFsdWUsIHBhcmFtKXtcclxuXHRjb25zb2xlLmxvZyhwYXJhbSlcclxuXHRjb25zb2xlLmxvZyh2YWx1ZSlcclxuXHRtYXhWYWx1ZS5mb3JFYWNoKGVsPT4ge1xyXG5cdFx0ZWwudGV4dENvbnRlbnQgPSB2YWx1ZVxyXG5cdH0pXHJcblx0bWluVmFsdWUuZm9yRWFjaChlbD0+IHtcclxuXHRcdGVsLnRleHRDb250ZW50ID0gdmFsdWVcclxuXHR9KVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gc3Vic2NyaWJlU2xpZGVyVG9vbHRpcCh2YWx1ZSl7XHJcblx0Wy4uLnNsaWRlcnM0LCAuLi5zbGlkZXJzNV0uZm9yRWFjaChlbD0+IHtcclxuXHRcdGVsLm5vVWlTbGlkZXIudXBkYXRlT3B0aW9ucyh7XHJcblx0XHRcdFx0dG9vbHRpcHM6ICBbd051bWIoe2RlY2ltYWxzOiAwLCBzdWZmaXg6IHZhbHVlfSldXHJcblx0XHR9KVxyXG5cdH0pXHJcblxyXG59XHJcblxyXG5leHBvcnQge1xyXG5cdCBvYnNlcnZlRGltZW50aW9uc1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/js/model/broadcastDimension.js\n");

/***/ }),

/***/ "./app/js/model/broadcastSlidersValue.js":
/*!***********************************************!*\
  !*** ./app/js/model/broadcastSlidersValue.js ***!
  \***********************************************/
/*! exports provided: observeSliders */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"observeSliders\", function() { return observeSliders; });\n/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observer */ \"./app/js/model/Observer.js\");\n/* harmony import */ var _libs_libs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../libs/libs */ \"./app/libs/libs.js\");\n/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view */ \"./app/js/view/index.js\");\n\n\n\n\nvar observeSliders = function observeSliders(_ref) {\n  var sliders = _ref.sliders;\n  var obj = {};\n  sliders.forEach(function (el) {\n    el.noUiSlider.on('set', function (values, handle) {\n      obj[el.id] = Math.round(+values[handle]);\n\n      if (el.id === 'satisfaction-wanted-1' || el.id === 'satisfaction-curr-1' || el.id === 'satisfaction-prev-1') {\n        countRow1({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          s1: 'satisfaction-wanted-1',\n          s2: 'satisfaction-curr-1'\n        });\n        drawRow1({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [0, 0],\n          s1: 'satisfaction-wanted-1',\n          s2: 'satisfaction-curr-1'\n        });\n        countRow7({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [6, 0],\n          s1: 'satisfaction-prev-1'\n        });\n        countRow8({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [7, 0],\n          i2: [0, 0]\n        });\n        countRow9({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [8, 0],\n          i2: [7, 0],\n          i3: [6, 0]\n        });\n      } else if (el.id === 'satisfaction-wanted-2' || el.id === 'satisfaction-curr-2' || el.id === 'satisfaction-prev-2') {\n        countRow1({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          s1: 'satisfaction-wanted-2',\n          s2: 'satisfaction-curr-2'\n        });\n        drawRow1({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [0, 1],\n          s1: 'satisfaction-wanted-2',\n          s2: 'satisfaction-curr-2'\n        });\n        countRow7({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [6, 1],\n          s1: 'satisfaction-prev-2'\n        });\n        countRow8({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [7, 1],\n          i2: [0, 1]\n        });\n        countRow9({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [8, 1],\n          i2: [7, 1],\n          i3: [6, 1]\n        });\n      } else if (el.id === 'satisfaction-wanted-3' || el.id === 'satisfaction-curr-3' || el.id === 'satisfaction-prev-3') {\n        countRow1({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          s1: 'satisfaction-wanted-3',\n          s2: 'satisfaction-curr-3'\n        });\n        drawRow1({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [0, 2],\n          s1: 'satisfaction-wanted-3',\n          s2: 'satisfaction-curr-3'\n        });\n        countRow7({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [6, 2],\n          s1: 'satisfaction-prev-3'\n        });\n        countRow8({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [7, 2],\n          i2: [0, 2]\n        });\n        countRow9({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [8, 2],\n          i2: [7, 2],\n          i3: [6, 2]\n        });\n      } else if (el.id === 'satisfaction-wanted-4' || el.id === 'satisfaction-curr-4' || el.id === 'satisfaction-prev-4') {\n        countRow1({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          s1: 'satisfaction-wanted-4',\n          s2: 'satisfaction-curr-4'\n        });\n        drawRow1({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [0, 3],\n          s1: 'satisfaction-wanted-4',\n          s2: 'satisfaction-curr-4'\n        });\n        countRow7({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [6, 3],\n          s1: 'satisfaction-prev-4'\n        });\n        countRow8({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [7, 3],\n          i2: [0, 3]\n        });\n        countRow9({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [8, 3],\n          i2: [7, 3],\n          i3: [6, 3]\n        });\n      } else if (el.id === 'satisfaction-wanted-5' || el.id === 'satisfaction-curr-5' || el.id === 'satisfaction-prev-5') {\n        countRow1({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          s1: 'satisfaction-wanted-5',\n          s2: 'satisfaction-curr-5'\n        });\n        drawRow1({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [0, 4],\n          s1: 'satisfaction-wanted-5',\n          s2: 'satisfaction-curr-5'\n        });\n        countRow7({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [6, 4],\n          s1: 'satisfaction-prev-5'\n        });\n        countRow8({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [7, 4],\n          i2: [0, 4]\n        });\n        countRow9({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [8, 4],\n          i2: [7, 4],\n          i3: [6, 4]\n        });\n      } else if (el.id === 'revenue-curr-1' || el.id === 'revenue-prev-1' || el.id === 'satisfaction-weight-1') {\n        countRow2({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          s1: 'revenue-curr-1',\n          s2: 'revenue-prev-1'\n        });\n        drawRow2({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [1, 0],\n          s1: 'revenue-curr-1',\n          s2: 'revenue-prev-1'\n        });\n        countRow4({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [3, 0],\n          i2: [0, 0],\n          s1: 'revenue-prev-1',\n          s2: 'satisfaction-weight-1'\n        });\n        countRow6({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [5, 0],\n          i2: [1, 0],\n          i3: [3, 0],\n          s1: 'satisfaction-weight-1'\n        });\n        countRow10({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [9, 0],\n          i2: [8, 0],\n          s1: 'revenue-prev-1'\n        });\n      } else if (el.id === 'revenue-curr-2' || el.id === 'revenue-prev-2' || el.id === 'satisfaction-weight-2') {\n        countRow2({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          s1: 'revenue-curr-2',\n          s2: 'revenue-prev-2'\n        });\n        drawRow2({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [1, 1],\n          s1: 'revenue-curr-2',\n          s2: 'revenue-prev-2'\n        });\n        countRow4({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [3, 1],\n          i2: [0, 1],\n          s1: 'revenue-prev-2',\n          s2: 'satisfaction-weight-2'\n        });\n        countRow6({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [5, 1],\n          i2: [1, 1],\n          i3: [3, 1],\n          s1: 'satisfaction-weight-2'\n        });\n        countRow10({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [9, 1],\n          i2: [8, 1],\n          s1: 'revenue-prev-2'\n        });\n      } else if (el.id === 'revenue-curr-3' || el.id === 'revenue-prev-3' || el.id === 'satisfaction-weight-3') {\n        countRow2({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          s1: 'revenue-curr-3',\n          s2: 'revenue-prev-3'\n        });\n        drawRow2({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [1, 2],\n          s1: 'revenue-curr-3',\n          s2: 'revenue-prev-3'\n        });\n        countRow4({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [3, 2],\n          i2: [0, 2],\n          s1: 'revenue-prev-3',\n          s2: 'satisfaction-weight-3'\n        });\n        countRow6({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [5, 2],\n          i2: [1, 2],\n          i3: [3, 2],\n          s1: 'satisfaction-weight-3'\n        });\n        countRow10({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [9, 2],\n          i2: [8, 2],\n          s1: 'revenue-prev-3'\n        });\n      } else if (el.id === 'revenue-curr-4' || el.id === 'revenue-prev-4' || el.id === 'satisfaction-weight-4') {\n        countRow2({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          s1: 'revenue-curr-4',\n          s2: 'revenue-prev-4'\n        });\n        drawRow2({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [1, 3],\n          s1: 'revenue-curr-4',\n          s2: 'revenue-prev-4'\n        });\n        countRow4({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [3, 3],\n          i2: [0, 3],\n          s1: 'revenue-prev-4',\n          s2: 'satisfaction-weight-4'\n        });\n        countRow6({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [5, 3],\n          i2: [1, 3],\n          i3: [3, 3],\n          s1: 'satisfaction-weight-4'\n        });\n        countRow10({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [9, 3],\n          i2: [8, 3],\n          s1: 'revenue-prev-4'\n        });\n      } else if (el.id === 'revenue-curr-5' || el.id === 'revenue-prev-5' || el.id === 'satisfaction-weight-5') {\n        countRow2({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          s1: 'revenue-curr-5',\n          s2: 'revenue-prev-5'\n        });\n        drawRow2({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [1, 4],\n          s1: 'revenue-curr-5',\n          s2: 'revenue-prev-5'\n        });\n        countRow4({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [3, 4],\n          i2: [0, 4],\n          s1: 'revenue-prev-5',\n          s2: 'satisfaction-weight-5'\n        });\n        countRow6({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [5, 4],\n          i2: [1, 4],\n          i3: [3, 4],\n          s1: 'satisfaction-weight-5'\n        });\n        countRow10({\n          obj: obj,\n          rowsArr: _view__WEBPACK_IMPORTED_MODULE_2__[\"rowsArr\"],\n          i: [9, 4],\n          i2: [8, 4],\n          s1: 'revenue-prev-5'\n        });\n      }\n    });\n  });\n}; ////////////////////////////////////////////\n////////////////////////////////////////////\n\n\nfunction countRow1(_ref2) {\n  var obj = _ref2.obj,\n      rowsArr = _ref2.rowsArr,\n      s1 = _ref2.s1,\n      s2 = _ref2.s2;\n  obj[s1] = +obj[s1] || 20;\n  obj[s2] = +obj[s2] || 20;\n  return Math.round(obj[s1] - obj[s2]) + '%';\n}\n\nfunction drawRow1(_ref3) {\n  var obj = _ref3.obj,\n      rowsArr = _ref3.rowsArr,\n      i = _ref3.i,\n      s1 = _ref3.s1,\n      s2 = _ref3.s2;\n  rowsArr[i[0]][i[1]].textContent = countRow1({\n    obj: obj,\n    rowsArr: rowsArr,\n    s1: s1,\n    s2: s2\n  });\n  return;\n} ////////////////////////////////////////////////\n////////////////////////////////////////////////\n\n\nfunction countRow2(_ref4) {\n  var obj = _ref4.obj,\n      rowsArr = _ref4.rowsArr,\n      s1 = _ref4.s1,\n      s2 = _ref4.s2;\n  obj[s1] = +obj[s1] || 0;\n  obj[s2] = +obj[s2] || 0;\n  return Math.round(obj[s1] - obj[s2]);\n}\n\nfunction drawRow2(_ref5) {\n  var obj = _ref5.obj,\n      rowsArr = _ref5.rowsArr,\n      i = _ref5.i,\n      s1 = _ref5.s1,\n      s2 = _ref5.s2;\n  rowsArr[i[0]][i[1]].textContent = countRow2({\n    obj: obj,\n    rowsArr: rowsArr,\n    s1: s1,\n    s2: s2\n  });\n  return;\n} ////////////////////////////////////////////////\n////////////////////////////////////////////////\n\n\nfunction countRow4(_ref6) {\n  var obj = _ref6.obj,\n      rowsArr = _ref6.rowsArr,\n      i = _ref6.i,\n      i2 = _ref6.i2,\n      s1 = _ref6.s1,\n      s2 = _ref6.s2;\n  obj[s1] = +obj[s1] || 0;\n  obj[s2] = +obj[s2] || 5;\n  var multiplier = +rowsArr[i2[0]][i2[1]].textContent.replace(/\\D/gi, \"\");\n  rowsArr[i[0]][i[1]].textContent = multiplier * obj[s1] * obj[s2] / 10000;\n  return;\n} ////////////////////////////////////////////////\n////////////////////////////////////////////////\n\n\nfunction countRow6(_ref7) {\n  var obj = _ref7.obj,\n      rowsArr = _ref7.rowsArr,\n      i = _ref7.i,\n      i2 = _ref7.i2,\n      i3 = _ref7.i3,\n      s1 = _ref7.s1;\n  obj[s1] = +obj[s1] || 5;\n  var divided = +rowsArr[i3[0]][i3[1]].textContent.replace(/\\D/gi, \"\");\n  var divider = +rowsArr[i2[0]][i2[1]].textContent.replace(/\\D/gi, \"\");\n\n  if (divider === 0) {\n    rowsArr[i[0]][i[1]].textContent = obj[s1] + '%';\n  } else {\n    rowsArr[i[0]][i[1]].textContent = divided / divider * 100 + '%';\n  }\n\n  return;\n} //////////////////////////////////////////////\n/////////////////////////////////////////////\n\n\nfunction countRow7(_ref8) {\n  var obj = _ref8.obj,\n      rowsArr = _ref8.rowsArr,\n      i = _ref8.i,\n      s1 = _ref8.s1;\n  obj[s1] = +obj[s1] || 20;\n\n  if (obj[s1] <= 40) {\n    rowsArr[i[0]][i[1]].textContent = 0.2;\n  } else if (obj[s1] <= 60) {\n    rowsArr[i[0]][i[1]].textContent = 0.8;\n  } else if (obj[s1] <= 80) {\n    rowsArr[i[0]][i[1]].textContent = 1;\n  } else if (obj[s1] <= 90) {\n    rowsArr[i[0]][i[1]].textContent = 1.5;\n  } else {\n    rowsArr[i[0]][i[1]].textContent = 3;\n  }\n\n  return;\n} ////////////////////////////////////////////////\n////////////////////////////////////////////////\n\n\nfunction countRow8(_ref9) {\n  var obj = _ref9.obj,\n      rowsArr = _ref9.rowsArr,\n      i = _ref9.i,\n      i2 = _ref9.i2;\n  var number = +rowsArr[i2[0]][i2[1]].textContent.replace(/\\D/gi, \"\");\n\n  if (number <= 5) {\n    rowsArr[i[0]][i[1]].textContent = 0.5;\n  } else if (number <= 10) {\n    rowsArr[i[0]][i[1]].textContent = 1;\n  } else if (number <= 15) {\n    rowsArr[i[0]][i[1]].textContent = 1.5;\n  } else if (number <= 20) {\n    rowsArr[i[0]][i[1]].textContent = 2.5;\n  } else {\n    rowsArr[i[0]][i[1]].textContent = 5;\n  }\n\n  return;\n} ////////////////////////////////////////////////\n////////////////////////////////////////////////\n\n\nfunction countRow9(_ref10) {\n  var obj = _ref10.obj,\n      rowsArr = _ref10.rowsArr,\n      i = _ref10.i,\n      i2 = _ref10.i2,\n      i3 = _ref10.i3;\n  var number = +rowsArr[i2[0]][i2[1]].textContent.replace(/\\D/gi, \"\");\n  var number2 = +rowsArr[i3[0]][i3[1]].textContent.replace(/\\D/gi, \"\");\n  console.log(number);\n  console.log(number2);\n  rowsArr[i[0]][i[1]].textContent = number * number2 / 1000 + \"%\";\n  return;\n} ////////////////////////////////////////////////\n////////////////////////////////////////////////\n\n\nfunction countRow10(_ref11) {\n  var obj = _ref11.obj,\n      rowsArr = _ref11.rowsArr,\n      i = _ref11.i,\n      i2 = _ref11.i2,\n      s1 = _ref11.s1;\n  obj[s1] = +obj[s1] || 0;\n  var number = +rowsArr[i2[0]][i2[1]].textContent.replace(/\\D/gi, \"\");\n  rowsArr[i[0]][i[1]].textContent = number * obj[s1] / 10000;\n  return;\n} ////////////////////////////////////////////////\n////////////////////////////////////////////////\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/js/model/broadcastSlidersValue.js\n");

/***/ }),

/***/ "./app/js/model/calcOneSliderSum.js":
/*!******************************************!*\
  !*** ./app/js/model/calcOneSliderSum.js ***!
  \******************************************/
/*! exports provided: calcSliderSum */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"calcSliderSum\", function() { return calcSliderSum; });\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _libs_libs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../libs/libs */ \"./app/libs/libs.js\");\n\n\n\nvar calcSliderSum = function calcSliderSum(sliderGroup, currGroup) {\n  var summ = 300;\n  var arr = [];\n  var valueArr = new Array(5).fill(0);\n  var summValueArr = [];\n  currGroup.forEach(function (el, ind) {\n    arr.push(el);\n  });\n  arr.forEach(function (el, ind, arr) {\n    if (ind !== 0) {\n      el.setAttribute('disabled', true);\n    }\n\n    el.noUiSlider.on('change', _doSmth);\n  });\n\n  function _doSmth(values, handle, unencoded, tap, positions, noUiSlider) {\n    var _this = this;\n\n    //Индекс текущего слайдера в массиве\n    var index = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(currGroup).findIndex(function (el) {\n      return el === _this.target;\n    }); //Убираем дизейбл для следующего слайдера после текущего\n\n\n    if (index + 1 < arr.length - 1 && +arr[index].noUiSlider.get() > 0) {\n      arr[index + 1].removeAttribute('disabled');\n    } //Складываем значение текущего слайдера в массив\n\n\n    valueArr[index] = +values[handle];\n\n    if (valueArr[index] === 0) {\n      var newArr = valueArr.splice(index);\n      newArr.fill(0);\n      valueArr = valueArr.concat(newArr);\n    } //Формируем новый массив каждый елемент которого равняется сумме всех предыдущих елементов массива\n\n\n    summValueArr = valueArr.map(function (el, ind, arr) {\n      var slicedArr = arr.slice(0, ind + 1);\n      var summ = slicedArr.reduce(function (prev, next) {\n        return prev + next;\n      });\n      return summ;\n    }); // console.log('SummValueArr:', summValueArr, 'Index:', index)\n    //Включаем дизейбл для следующих слайдеров после текущего, если текущая сумма всех слайдеров равняеться общей сумме введенной посетителем\n\n    if (summValueArr[index] >= summ) {\n      var arr2 = arr.filter(function (el, ind) {\n        return ind !== index && ind > index;\n      });\n      arr2.forEach(function (el) {\n        el.setAttribute('disabled', true);\n        el.noUiSlider.reset();\n      });\n    } // if(summValueArr[index] === 0) {\n    // \tconsole.log('true')\n    // }\n    // let arr2 = arr.filter((el, ind) => ind !== index && ind > index)\n    // \tarr2.forEach(el=> {\n    // \t})\n\n\n    try {\n      arr.forEach(function (el, ind, arr) {\n        // console.log(summValueArr)\n        if (arr[ind].noUiSlider.get() === 'NaN') {\n          arr[ind].noUiSlider.reset();\n        }\n\n        if (+arr[index].noUiSlider.get() === 0) {\n          // console.log('yes')\n          var _arr = arr.filter(function (el, ind) {\n            return ind !== index && ind > index;\n          });\n\n          _arr.forEach(function (el) {\n            el.querySelector('.slider-area__max-value .slider-area__summ').textContent = 0;\n            el.noUiSlider.reset();\n          }); // summValueArr.forEach(el=> {\n          // \tel = 0\n          // })\n\n        } // if(ind === 0) {\n        // } \n        // else if(ind === arr.length - 1) {\n        // }\n        // else {\n        // }\n\n\n        arr[0].noUiSlider.updateOptions({\n          range: {\n            'min': 0,\n            'max': summ\n          }\n        });\n        arr[0].querySelector('.slider-area__max-value .slider-area__summ').textContent = Math.round(summ);\n        arr[1].noUiSlider.updateOptions({\n          range: {\n            'min': 0,\n            'max': summValueArr[0] ? summ - summValueArr[0] : 1\n          },\n          start: 0\n        });\n        arr[1].querySelector('.slider-area__max-value .slider-area__summ').textContent = Math.round(summValueArr[0] ? summ - summValueArr[0] : 0);\n        arr[2].noUiSlider.updateOptions({\n          range: {\n            'min': 0,\n            'max': summValueArr[1] ? summ - summValueArr[1] : 1\n          },\n          start: 0\n        });\n        arr[2].querySelector('.slider-area__max-value .slider-area__summ').textContent = Math.round(summValueArr[1] ? summ - summValueArr[1] : 0);\n        arr[3].noUiSlider.updateOptions({\n          range: {\n            'min': 0,\n            'max': summValueArr[2] ? summ - summValueArr[2] : 1\n          },\n          start: 0\n        });\n        arr[3].querySelector('.slider-area__max-value .slider-area__summ').textContent = Math.round(summValueArr[2] ? summ - summValueArr[2] : 0);\n        arr[4].noUiSlider.updateOptions({\n          range: {\n            'min': 0,\n            'max': summValueArr[3] ? summ - summValueArr[3] : 1\n          },\n          start: summValueArr[3] ? summ - summValueArr[3] : 0\n        });\n        arr[4].querySelector('.slider-area__max-value .slider-area__summ').textContent = Math.round(summ - summValueArr[3]) <= 0 ? 0 : Math.round(summ - summValueArr[3]);\n      }); // if(index !== 0) {\n      // let arr2 = arr.filter((el, ind) => ind !== index && ind > index)\n      // // let summValueArr2 = summValueArr.filter((el, ind) => ind !== index && ind > index)\n      // // console.log(summValueArr2)\n      // // console.log(arr2)\n      // console.log(summValueArr)\n      // \tarr2.forEach((el, ind)=> {\n      // \t\tel.noUiSlider.updateOptions({\n      // \t\t\trange: {\n      // \t\t\t\t\t'min': 0,\n      // \t\t\t\t\t'max': summ - summValueArr[index]\n      // \t\t\t}\n      // \t\t})\n      // \t\tel.querySelector('.slider-area__max-value .slider-area__summ').textContent = Math.round(summ - summValueArr[index])\n      // \t})\n      // } else {\n      // \tlet arr2 = arr.filter((el, ind) => ind !== index && ind > index)\n      // \t\tarr2.forEach(el=> {\n      // \t\tel.noUiSlider.updateOptions({\n      // \t\t\trange: {\n      // \t\t\t\t\t'min': 0,\n      // \t\t\t\t\t'max': summ - summValueArr[index]\n      // \t\t\t}\n      // \t\t})\n      // \t\tel.querySelector('.slider-area__max-value .slider-area__summ').textContent = Math.round(summ - summValueArr[index])\n      // \t})\n      // }\n    } catch (_ref) {\n      var message = _ref.message;\n      console.error(message);\n\n      var _arr2 = arr.filter(function (el, ind) {\n        return ind !== index && ind > index;\n      });\n\n      _arr2.forEach(function (el) {\n        el.querySelector('.slider-area__max-value .slider-area__summ').textContent = 0;\n        el.noUiSlider.reset();\n      });\n    }\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/js/model/calcOneSliderSum.js\n");

/***/ }),

/***/ "./app/js/model/index.js":
/*!*******************************!*\
  !*** ./app/js/model/index.js ***!
  \*******************************/
/*! exports provided: calcSliderSum, observeDimentions, observeSliders */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calcOneSliderSum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calcOneSliderSum */ \"./app/js/model/calcOneSliderSum.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"calcSliderSum\", function() { return _calcOneSliderSum__WEBPACK_IMPORTED_MODULE_0__[\"calcSliderSum\"]; });\n\n/* harmony import */ var _broadcastDimension__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./broadcastDimension */ \"./app/js/model/broadcastDimension.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"observeDimentions\", function() { return _broadcastDimension__WEBPACK_IMPORTED_MODULE_1__[\"observeDimentions\"]; });\n\n/* harmony import */ var _broadcastSlidersValue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./broadcastSlidersValue */ \"./app/js/model/broadcastSlidersValue.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"observeSliders\", function() { return _broadcastSlidersValue__WEBPACK_IMPORTED_MODULE_2__[\"observeSliders\"]; });\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvbW9kZWwvaW5kZXguanM/YzgzZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL2FwcC9qcy9tb2RlbC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQge2NhbGNTbGlkZXJTdW19IGZyb20gJy4vY2FsY09uZVNsaWRlclN1bSdcclxuaW1wb3J0IHtvYnNlcnZlRGltZW50aW9uc30gZnJvbSAnLi9icm9hZGNhc3REaW1lbnNpb24nXHJcbmltcG9ydCB7b2JzZXJ2ZVNsaWRlcnN9IGZyb20gJy4vYnJvYWRjYXN0U2xpZGVyc1ZhbHVlJ1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCB7XHJcblx0Ly8gRXZlbnRPYnNlcnZlcixcclxuXHRjYWxjU2xpZGVyU3VtLFxyXG5cdG9ic2VydmVEaW1lbnRpb25zLFxyXG5cdG9ic2VydmVTbGlkZXJzXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/js/model/index.js\n");

/***/ }),

/***/ "./app/js/view/index.js":
/*!******************************!*\
  !*** ./app/js/view/index.js ***!
  \******************************/
/*! exports provided: sliders, sliders4, sliders5, select, maxValue, minValue, currInput, rows, rowsArr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sliders\", function() { return sliders; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sliders4\", function() { return sliders4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sliders5\", function() { return sliders5; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"select\", function() { return select; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"maxValue\", function() { return maxValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"minValue\", function() { return minValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"currInput\", function() { return currInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rows\", function() { return rows; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rowsArr\", function() { return rowsArr; });\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);\n\nvar sliders1 = document.querySelectorAll('.percent-slider');\nvar sliders2 = document.querySelectorAll('.percent-slider-2');\nvar sliders3 = document.querySelectorAll('.percent-slider-3');\nvar sliders4 = document.querySelectorAll('.absolute-slider');\nvar sliders5 = document.querySelectorAll('.absolute-slider-2');\nvar sliders = [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(sliders1), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(sliders2), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(sliders3), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(sliders4), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(sliders5));\nvar select = document.querySelector('.header__units-select');\nvar currInput = document.querySelector('.input-curr');\nvar wantInput = document.querySelector('.input-want');\nvar maxValue = document.querySelectorAll('.slider-area__max-value .slider-area__currency');\nvar minValue = document.querySelectorAll('.slider-area__min-value .slider-area__currency');\nvar rows = document.querySelectorAll('.count-table__data-body-row');\n\nvar rowsArr = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(rows).map(function (el, ind) {\n  // console.log(el.children.children)\n  return Array.from(el.children).splice(1).map(function (elem) {\n    return elem.firstElementChild;\n  });\n}); // console.log(rowsArr)\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvdmlldy9pbmRleC5qcz9hY2Y1Il0sIm5hbWVzIjpbInNsaWRlcnMxIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2xpZGVyczIiLCJzbGlkZXJzMyIsInNsaWRlcnM0Iiwic2xpZGVyczUiLCJzbGlkZXJzIiwic2VsZWN0IiwicXVlcnlTZWxlY3RvciIsImN1cnJJbnB1dCIsIndhbnRJbnB1dCIsIm1heFZhbHVlIiwibWluVmFsdWUiLCJyb3dzIiwicm93c0FyciIsIm1hcCIsImVsIiwiaW5kIiwiQXJyYXkiLCJmcm9tIiwiY2hpbGRyZW4iLCJzcGxpY2UiLCJlbGVtIiwiZmlyc3RFbGVtZW50Q2hpbGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxJQUFNQSxRQUFRLEdBQUdDLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsaUJBQTFCLENBQWpCO0FBQ0EsSUFBTUMsUUFBUSxHQUFHRixRQUFRLENBQUNDLGdCQUFULENBQTBCLG1CQUExQixDQUFqQjtBQUNBLElBQU1FLFFBQVEsR0FBR0gsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixtQkFBMUIsQ0FBakI7QUFDQSxJQUFNRyxRQUFRLEdBQUdKLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsa0JBQTFCLENBQWpCO0FBQ0EsSUFBTUksUUFBUSxHQUFHTCxRQUFRLENBQUNDLGdCQUFULENBQTBCLG9CQUExQixDQUFqQjtBQUVBLElBQU1LLE9BQU8sNkZBQU9QLFFBQVAsbUZBQW9CRyxRQUFwQixtRkFBaUNDLFFBQWpDLG1GQUE4Q0MsUUFBOUMsbUZBQTJEQyxRQUEzRCxFQUFiO0FBR0EsSUFBTUUsTUFBTSxHQUFHUCxRQUFRLENBQUNRLGFBQVQsQ0FBdUIsdUJBQXZCLENBQWY7QUFDQSxJQUFNQyxTQUFTLEdBQUdULFFBQVEsQ0FBQ1EsYUFBVCxDQUF1QixhQUF2QixDQUFsQjtBQUNBLElBQU1FLFNBQVMsR0FBR1YsUUFBUSxDQUFDUSxhQUFULENBQXVCLGFBQXZCLENBQWxCO0FBR0EsSUFBTUcsUUFBUSxHQUFHWCxRQUFRLENBQUNDLGdCQUFULENBQTBCLGdEQUExQixDQUFqQjtBQUNBLElBQU1XLFFBQVEsR0FBR1osUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixnREFBMUIsQ0FBakI7QUFHQSxJQUFNWSxJQUFJLEdBQUdiLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsNkJBQTFCLENBQWI7O0FBSUEsSUFBSWEsT0FBTyxHQUFHLGdGQUFJRCxJQUFKLEVBQVVFLEdBQVYsQ0FBYyxVQUFDQyxFQUFELEVBQUtDLEdBQUwsRUFBWTtBQUN2QztBQUNBLFNBQU9DLEtBQUssQ0FBQ0MsSUFBTixDQUFXSCxFQUFFLENBQUNJLFFBQWQsRUFBd0JDLE1BQXhCLENBQStCLENBQS9CLEVBQWtDTixHQUFsQyxDQUFzQyxVQUFBTyxJQUFJO0FBQUEsV0FBR0EsSUFBSSxDQUFDQyxpQkFBUjtBQUFBLEdBQTFDLENBQVA7QUFDQSxDQUhhLENBQWQsQyxDQUtBIiwiZmlsZSI6Ii4vYXBwL2pzL3ZpZXcvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuY29uc3Qgc2xpZGVyczEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGVyY2VudC1zbGlkZXInKVxyXG5jb25zdCBzbGlkZXJzMiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wZXJjZW50LXNsaWRlci0yJylcclxuY29uc3Qgc2xpZGVyczMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGVyY2VudC1zbGlkZXItMycpXHJcbmNvbnN0IHNsaWRlcnM0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFic29sdXRlLXNsaWRlcicpXHJcbmNvbnN0IHNsaWRlcnM1ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFic29sdXRlLXNsaWRlci0yJylcclxuXHJcbmNvbnN0IHNsaWRlcnMgPSBbLi4uc2xpZGVyczEsIC4uLnNsaWRlcnMyLCAuLi5zbGlkZXJzMywgLi4uc2xpZGVyczQsIC4uLnNsaWRlcnM1XVxyXG5cclxuXHJcbmNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX3VuaXRzLXNlbGVjdCcpXHJcbmNvbnN0IGN1cnJJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1jdXJyJylcclxuY29uc3Qgd2FudElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0LXdhbnQnKVxyXG5cclxuXHJcbmNvbnN0IG1heFZhbHVlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlci1hcmVhX19tYXgtdmFsdWUgLnNsaWRlci1hcmVhX19jdXJyZW5jeScpXHJcbmNvbnN0IG1pblZhbHVlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlci1hcmVhX19taW4tdmFsdWUgLnNsaWRlci1hcmVhX19jdXJyZW5jeScpXHJcblxyXG5cclxuY29uc3Qgcm93cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb3VudC10YWJsZV9fZGF0YS1ib2R5LXJvdycpXHJcblxyXG5cclxuXHJcbmxldCByb3dzQXJyID0gWy4uLnJvd3NdLm1hcCgoZWwsIGluZCk9PiB7XHJcblx0Ly8gY29uc29sZS5sb2coZWwuY2hpbGRyZW4uY2hpbGRyZW4pXHJcblx0cmV0dXJuIEFycmF5LmZyb20oZWwuY2hpbGRyZW4pLnNwbGljZSgxKS5tYXAoZWxlbT0+IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQpXHJcbn0pXHJcblxyXG4vLyBjb25zb2xlLmxvZyhyb3dzQXJyKVxyXG5cclxuXHJcblxyXG5leHBvcnQge1xyXG5cdHNsaWRlcnMsXHJcblx0c2xpZGVyczQsXHJcblx0c2xpZGVyczUsXHJcblx0c2VsZWN0LFxyXG5cdG1heFZhbHVlLFxyXG5cdG1pblZhbHVlLFxyXG5cdGN1cnJJbnB1dCxcclxuXHRyb3dzLFxyXG5cdHJvd3NBcnJcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/js/view/index.js\n");

/***/ }),

/***/ "./app/libs/libs.js":
/*!**************************!*\
  !*** ./app/libs/libs.js ***!
  \**************************/
/*! exports provided: noUiSlider, wNumb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nouislider */ \"./node_modules/nouislider/distribute/nouislider.js\");\n/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(nouislider__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"noUiSlider\", function() { return nouislider__WEBPACK_IMPORTED_MODULE_0___default.a; });\n/* harmony import */ var wNumb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wNumb */ \"./node_modules/wNumb/wNumb.js\");\n/* harmony import */ var wNumb__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(wNumb__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"wNumb\", function() { return wNumb__WEBPACK_IMPORTED_MODULE_1___default.a; });\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbGlicy9saWJzLmpzPzcxYWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBIiwiZmlsZSI6Ii4vYXBwL2xpYnMvbGlicy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBub1VpU2xpZGVyIGZyb20gJ25vdWlzbGlkZXInO1xyXG5pbXBvcnQgd051bWIgZnJvbSAnd051bWInXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCB7XHJcblx0bm9VaVNsaWRlciwgd051bWJcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/libs/libs.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheUxpa2VUb0FycmF5LmpzPzVhNDMiXSwibmFtZXMiOlsiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJsZW5ndGgiLCJpIiwiYXJyMiIsIkFycmF5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsaUJBQVQsQ0FBMkJDLEdBQTNCLEVBQWdDQyxHQUFoQyxFQUFxQztBQUNuQyxNQUFJQSxHQUFHLElBQUksSUFBUCxJQUFlQSxHQUFHLEdBQUdELEdBQUcsQ0FBQ0UsTUFBN0IsRUFBcUNELEdBQUcsR0FBR0QsR0FBRyxDQUFDRSxNQUFWOztBQUVyQyxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLElBQUksR0FBRyxJQUFJQyxLQUFKLENBQVVKLEdBQVYsQ0FBdkIsRUFBdUNFLENBQUMsR0FBR0YsR0FBM0MsRUFBZ0RFLENBQUMsRUFBakQsRUFBcUQ7QUFDbkRDLFFBQUksQ0FBQ0QsQ0FBRCxDQUFKLEdBQVVILEdBQUcsQ0FBQ0csQ0FBRCxDQUFiO0FBQ0Q7O0FBRUQsU0FBT0MsSUFBUDtBQUNEOztBQUVERSxNQUFNLENBQUNDLE9BQVAsR0FBaUJSLGlCQUFqQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5TGlrZVRvQXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5TGlrZVRvQXJyYXk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ \"./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qcz8yMjM2Il0sIm5hbWVzIjpbImFycmF5TGlrZVRvQXJyYXkiLCJyZXF1aXJlIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsZ0JBQWdCLEdBQUdDLG1CQUFPLENBQUMscUZBQUQsQ0FBOUI7O0FBRUEsU0FBU0Msa0JBQVQsQ0FBNEJDLEdBQTVCLEVBQWlDO0FBQy9CLE1BQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixHQUFkLENBQUosRUFBd0IsT0FBT0gsZ0JBQWdCLENBQUNHLEdBQUQsQ0FBdkI7QUFDekI7O0FBRURHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsa0JBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRob3V0SG9sZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXlcIik7XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXM7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcz85NzBiIl0sIm5hbWVzIjpbIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxlQUFULENBQXlCQyxRQUF6QixFQUFtQ0MsV0FBbkMsRUFBZ0Q7QUFDOUMsTUFBSSxFQUFFRCxRQUFRLFlBQVlDLFdBQXRCLENBQUosRUFBd0M7QUFDdEMsVUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUNEO0FBQ0Y7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsZUFBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/classCallCheck.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcz81YmMzIl0sIm5hbWVzIjpbIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxpQkFBVCxDQUEyQkMsTUFBM0IsRUFBbUNDLEtBQW5DLEVBQTBDO0FBQ3hDLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsS0FBSyxDQUFDRSxNQUExQixFQUFrQ0QsQ0FBQyxFQUFuQyxFQUF1QztBQUNyQyxRQUFJRSxVQUFVLEdBQUdILEtBQUssQ0FBQ0MsQ0FBRCxDQUF0QjtBQUNBRSxjQUFVLENBQUNDLFVBQVgsR0FBd0JELFVBQVUsQ0FBQ0MsVUFBWCxJQUF5QixLQUFqRDtBQUNBRCxjQUFVLENBQUNFLFlBQVgsR0FBMEIsSUFBMUI7QUFDQSxRQUFJLFdBQVdGLFVBQWYsRUFBMkJBLFVBQVUsQ0FBQ0csUUFBWCxHQUFzQixJQUF0QjtBQUMzQkMsVUFBTSxDQUFDQyxjQUFQLENBQXNCVCxNQUF0QixFQUE4QkksVUFBVSxDQUFDTSxHQUF6QyxFQUE4Q04sVUFBOUM7QUFDRDtBQUNGOztBQUVELFNBQVNPLFlBQVQsQ0FBc0JDLFdBQXRCLEVBQW1DQyxVQUFuQyxFQUErQ0MsV0FBL0MsRUFBNEQ7QUFDMUQsTUFBSUQsVUFBSixFQUFnQmQsaUJBQWlCLENBQUNhLFdBQVcsQ0FBQ0csU0FBYixFQUF3QkYsVUFBeEIsQ0FBakI7QUFDaEIsTUFBSUMsV0FBSixFQUFpQmYsaUJBQWlCLENBQUNhLFdBQUQsRUFBY0UsV0FBZCxDQUFqQjtBQUNqQixTQUFPRixXQUFQO0FBQ0Q7O0FBRURJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQk4sWUFBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/createClass.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArray.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanM/MTFiMCJdLCJuYW1lcyI6WyJfaXRlcmFibGVUb0FycmF5IiwiaXRlciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiT2JqZWN0IiwiQXJyYXkiLCJmcm9tIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsZ0JBQVQsQ0FBMEJDLElBQTFCLEVBQWdDO0FBQzlCLE1BQUksT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0EsTUFBTSxDQUFDQyxRQUFQLElBQW1CQyxNQUFNLENBQUNILElBQUQsQ0FBOUQsRUFBc0UsT0FBT0ksS0FBSyxDQUFDQyxJQUFOLENBQVdMLElBQVgsQ0FBUDtBQUN2RTs7QUFFRE0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCUixnQkFBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/iterableToArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcz8wNjc2Il0sIm5hbWVzIjpbIl9ub25JdGVyYWJsZVNwcmVhZCIsIlR5cGVFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGtCQUFULEdBQThCO0FBQzVCLFFBQU0sSUFBSUMsU0FBSixDQUFjLHNJQUFkLENBQU47QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxrQkFBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toConsumableArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles */ \"./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js\");\n\nvar iterableToArray = __webpack_require__(/*! ./iterableToArray */ \"./node_modules/@babel/runtime/helpers/iterableToArray.js\");\n\nvar unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ \"./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread */ \"./node_modules/@babel/runtime/helpers/nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcz80NDhhIl0sIm5hbWVzIjpbImFycmF5V2l0aG91dEhvbGVzIiwicmVxdWlyZSIsIml0ZXJhYmxlVG9BcnJheSIsInVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxpQkFBaUIsR0FBR0MsbUJBQU8sQ0FBQyx1RkFBRCxDQUEvQjs7QUFFQSxJQUFJQyxlQUFlLEdBQUdELG1CQUFPLENBQUMsbUZBQUQsQ0FBN0I7O0FBRUEsSUFBSUUsMEJBQTBCLEdBQUdGLG1CQUFPLENBQUMseUdBQUQsQ0FBeEM7O0FBRUEsSUFBSUcsaUJBQWlCLEdBQUdILG1CQUFPLENBQUMsdUZBQUQsQ0FBL0I7O0FBRUEsU0FBU0ksa0JBQVQsQ0FBNEJDLEdBQTVCLEVBQWlDO0FBQy9CLFNBQU9OLGlCQUFpQixDQUFDTSxHQUFELENBQWpCLElBQTBCSixlQUFlLENBQUNJLEdBQUQsQ0FBekMsSUFBa0RILDBCQUEwQixDQUFDRyxHQUFELENBQTVFLElBQXFGRixpQkFBaUIsRUFBN0c7QUFDRDs7QUFFREcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxrQkFBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiKTtcblxudmFyIG5vbkl0ZXJhYmxlU3ByZWFkID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVTcHJlYWRcIik7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/toConsumableArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ \"./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcz82NjEzIl0sIm5hbWVzIjpbImFycmF5TGlrZVRvQXJyYXkiLCJyZXF1aXJlIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibyIsIm1pbkxlbiIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxnQkFBZ0IsR0FBR0MsbUJBQU8sQ0FBQyxxRkFBRCxDQUE5Qjs7QUFFQSxTQUFTQywyQkFBVCxDQUFxQ0MsQ0FBckMsRUFBd0NDLE1BQXhDLEVBQWdEO0FBQzlDLE1BQUksQ0FBQ0QsQ0FBTCxFQUFRO0FBQ1IsTUFBSSxPQUFPQSxDQUFQLEtBQWEsUUFBakIsRUFBMkIsT0FBT0gsZ0JBQWdCLENBQUNHLENBQUQsRUFBSUMsTUFBSixDQUF2QjtBQUMzQixNQUFJQyxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCTixDQUEvQixFQUFrQ08sS0FBbEMsQ0FBd0MsQ0FBeEMsRUFBMkMsQ0FBQyxDQUE1QyxDQUFSO0FBQ0EsTUFBSUwsQ0FBQyxLQUFLLFFBQU4sSUFBa0JGLENBQUMsQ0FBQ1EsV0FBeEIsRUFBcUNOLENBQUMsR0FBR0YsQ0FBQyxDQUFDUSxXQUFGLENBQWNDLElBQWxCO0FBQ3JDLE1BQUlQLENBQUMsS0FBSyxLQUFOLElBQWVBLENBQUMsS0FBSyxLQUF6QixFQUFnQyxPQUFPUSxLQUFLLENBQUNDLElBQU4sQ0FBV1gsQ0FBWCxDQUFQO0FBQ2hDLE1BQUlFLENBQUMsS0FBSyxXQUFOLElBQXFCLDJDQUEyQ1UsSUFBM0MsQ0FBZ0RWLENBQWhELENBQXpCLEVBQTZFLE9BQU9MLGdCQUFnQixDQUFDRyxDQUFELEVBQUlDLE1BQUosQ0FBdkI7QUFDOUU7O0FBRURZLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmYsMkJBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXlcIik7XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\n");

/***/ }),

/***/ "./node_modules/nouislider/distribute/nouislider.js":
/*!**********************************************************!*\
  !*** ./node_modules/nouislider/distribute/nouislider.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! nouislider - 14.5.0 - 5/11/2020 */\n(function (factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function () {\n  \"use strict\";\n\n  var VERSION = \"14.5.0\"; //region Helper Methods\n\n  function isValidFormatter(entry) {\n    return typeof entry === \"object\" && typeof entry.to === \"function\" && typeof entry.from === \"function\";\n  }\n\n  function removeElement(el) {\n    el.parentElement.removeChild(el);\n  }\n\n  function isSet(value) {\n    return value !== null && value !== undefined;\n  } // Bindable version\n\n\n  function preventDefault(e) {\n    e.preventDefault();\n  } // Removes duplicates from an array.\n\n\n  function unique(array) {\n    return array.filter(function (a) {\n      return !this[a] ? this[a] = true : false;\n    }, {});\n  } // Round a value to the closest 'to'.\n\n\n  function closest(value, to) {\n    return Math.round(value / to) * to;\n  } // Current position of an element relative to the document.\n\n\n  function offset(elem, orientation) {\n    var rect = elem.getBoundingClientRect();\n    var doc = elem.ownerDocument;\n    var docElem = doc.documentElement;\n    var pageOffset = getPageOffset(doc); // getBoundingClientRect contains left scroll in Chrome on Android.\n    // I haven't found a feature detection that proves this. Worst case\n    // scenario on mis-match: the 'tap' feature on horizontal sliders breaks.\n\n    if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {\n      pageOffset.x = 0;\n    }\n\n    return orientation ? rect.top + pageOffset.y - docElem.clientTop : rect.left + pageOffset.x - docElem.clientLeft;\n  } // Checks whether a value is numerical.\n\n\n  function isNumeric(a) {\n    return typeof a === \"number\" && !isNaN(a) && isFinite(a);\n  } // Sets a class and removes it after [duration] ms.\n\n\n  function addClassFor(element, className, duration) {\n    if (duration > 0) {\n      addClass(element, className);\n      setTimeout(function () {\n        removeClass(element, className);\n      }, duration);\n    }\n  } // Limits a value to 0 - 100\n\n\n  function limit(a) {\n    return Math.max(Math.min(a, 100), 0);\n  } // Wraps a variable as an array, if it isn't one yet.\n  // Note that an input array is returned by reference!\n\n\n  function asArray(a) {\n    return Array.isArray(a) ? a : [a];\n  } // Counts decimals\n\n\n  function countDecimals(numStr) {\n    numStr = String(numStr);\n    var pieces = numStr.split(\".\");\n    return pieces.length > 1 ? pieces[1].length : 0;\n  } // http://youmightnotneedjquery.com/#add_class\n\n\n  function addClass(el, className) {\n    if (el.classList && !/\\s/.test(className)) {\n      el.classList.add(className);\n    } else {\n      el.className += \" \" + className;\n    }\n  } // http://youmightnotneedjquery.com/#remove_class\n\n\n  function removeClass(el, className) {\n    if (el.classList && !/\\s/.test(className)) {\n      el.classList.remove(className);\n    } else {\n      el.className = el.className.replace(new RegExp(\"(^|\\\\b)\" + className.split(\" \").join(\"|\") + \"(\\\\b|$)\", \"gi\"), \" \");\n    }\n  } // https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/\n\n\n  function hasClass(el, className) {\n    return el.classList ? el.classList.contains(className) : new RegExp(\"\\\\b\" + className + \"\\\\b\").test(el.className);\n  } // https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY#Notes\n\n\n  function getPageOffset(doc) {\n    var supportPageOffset = window.pageXOffset !== undefined;\n    var isCSS1Compat = (doc.compatMode || \"\") === \"CSS1Compat\";\n    var x = supportPageOffset ? window.pageXOffset : isCSS1Compat ? doc.documentElement.scrollLeft : doc.body.scrollLeft;\n    var y = supportPageOffset ? window.pageYOffset : isCSS1Compat ? doc.documentElement.scrollTop : doc.body.scrollTop;\n    return {\n      x: x,\n      y: y\n    };\n  } // we provide a function to compute constants instead\n  // of accessing window.* as soon as the module needs it\n  // so that we do not compute anything if not needed\n\n\n  function getActions() {\n    // Determine the events to bind. IE11 implements pointerEvents without\n    // a prefix, which breaks compatibility with the IE10 implementation.\n    return window.navigator.pointerEnabled ? {\n      start: \"pointerdown\",\n      move: \"pointermove\",\n      end: \"pointerup\"\n    } : window.navigator.msPointerEnabled ? {\n      start: \"MSPointerDown\",\n      move: \"MSPointerMove\",\n      end: \"MSPointerUp\"\n    } : {\n      start: \"mousedown touchstart\",\n      move: \"mousemove touchmove\",\n      end: \"mouseup touchend\"\n    };\n  } // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n  // Issue #785\n\n\n  function getSupportsPassive() {\n    var supportsPassive = false;\n    /* eslint-disable */\n\n    try {\n      var opts = Object.defineProperty({}, \"passive\", {\n        get: function () {\n          supportsPassive = true;\n        }\n      });\n      window.addEventListener(\"test\", null, opts);\n    } catch (e) {}\n    /* eslint-enable */\n\n\n    return supportsPassive;\n  }\n\n  function getSupportsTouchActionNone() {\n    return window.CSS && CSS.supports && CSS.supports(\"touch-action\", \"none\");\n  } //endregion\n  //region Range Calculation\n  // Determine the size of a sub-range in relation to a full range.\n\n\n  function subRangeRatio(pa, pb) {\n    return 100 / (pb - pa);\n  } // (percentage) How many percent is this value of this range?\n\n\n  function fromPercentage(range, value, startRange) {\n    return value * 100 / (range[startRange + 1] - range[startRange]);\n  } // (percentage) Where is this value on this range?\n\n\n  function toPercentage(range, value) {\n    return fromPercentage(range, range[0] < 0 ? value + Math.abs(range[0]) : value - range[0], 0);\n  } // (value) How much is this percentage on this range?\n\n\n  function isPercentage(range, value) {\n    return value * (range[1] - range[0]) / 100 + range[0];\n  }\n\n  function getJ(value, arr) {\n    var j = 1;\n\n    while (value >= arr[j]) {\n      j += 1;\n    }\n\n    return j;\n  } // (percentage) Input a value, find where, on a scale of 0-100, it applies.\n\n\n  function toStepping(xVal, xPct, value) {\n    if (value >= xVal.slice(-1)[0]) {\n      return 100;\n    }\n\n    var j = getJ(value, xVal);\n    var va = xVal[j - 1];\n    var vb = xVal[j];\n    var pa = xPct[j - 1];\n    var pb = xPct[j];\n    return pa + toPercentage([va, vb], value) / subRangeRatio(pa, pb);\n  } // (value) Input a percentage, find where it is on the specified range.\n\n\n  function fromStepping(xVal, xPct, value) {\n    // There is no range group that fits 100\n    if (value >= 100) {\n      return xVal.slice(-1)[0];\n    }\n\n    var j = getJ(value, xPct);\n    var va = xVal[j - 1];\n    var vb = xVal[j];\n    var pa = xPct[j - 1];\n    var pb = xPct[j];\n    return isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));\n  } // (percentage) Get the step that applies at a certain value.\n\n\n  function getStep(xPct, xSteps, snap, value) {\n    if (value === 100) {\n      return value;\n    }\n\n    var j = getJ(value, xPct);\n    var a = xPct[j - 1];\n    var b = xPct[j]; // If 'snap' is set, steps are used as fixed points on the slider.\n\n    if (snap) {\n      // Find the closest position, a or b.\n      if (value - a > (b - a) / 2) {\n        return b;\n      }\n\n      return a;\n    }\n\n    if (!xSteps[j - 1]) {\n      return value;\n    }\n\n    return xPct[j - 1] + closest(value - xPct[j - 1], xSteps[j - 1]);\n  }\n\n  function handleEntryPoint(index, value, that) {\n    var percentage; // Wrap numerical input in an array.\n\n    if (typeof value === \"number\") {\n      value = [value];\n    } // Reject any invalid input, by testing whether value is an array.\n\n\n    if (!Array.isArray(value)) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'range' contains invalid value.\");\n    } // Covert min/max syntax to 0 and 100.\n\n\n    if (index === \"min\") {\n      percentage = 0;\n    } else if (index === \"max\") {\n      percentage = 100;\n    } else {\n      percentage = parseFloat(index);\n    } // Check for correct input.\n\n\n    if (!isNumeric(percentage) || !isNumeric(value[0])) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'range' value isn't numeric.\");\n    } // Store values.\n\n\n    that.xPct.push(percentage);\n    that.xVal.push(value[0]); // NaN will evaluate to false too, but to keep\n    // logging clear, set step explicitly. Make sure\n    // not to override the 'step' setting with false.\n\n    if (!percentage) {\n      if (!isNaN(value[1])) {\n        that.xSteps[0] = value[1];\n      }\n    } else {\n      that.xSteps.push(isNaN(value[1]) ? false : value[1]);\n    }\n\n    that.xHighestCompleteStep.push(0);\n  }\n\n  function handleStepPoint(i, n, that) {\n    // Ignore 'false' stepping.\n    if (!n) {\n      return;\n    } // Step over zero-length ranges (#948);\n\n\n    if (that.xVal[i] === that.xVal[i + 1]) {\n      that.xSteps[i] = that.xHighestCompleteStep[i] = that.xVal[i];\n      return;\n    } // Factor to range ratio\n\n\n    that.xSteps[i] = fromPercentage([that.xVal[i], that.xVal[i + 1]], n, 0) / subRangeRatio(that.xPct[i], that.xPct[i + 1]);\n    var totalSteps = (that.xVal[i + 1] - that.xVal[i]) / that.xNumSteps[i];\n    var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);\n    var step = that.xVal[i] + that.xNumSteps[i] * highestStep;\n    that.xHighestCompleteStep[i] = step;\n  } //endregion\n  //region Spectrum\n\n\n  function Spectrum(entry, snap, singleStep) {\n    this.xPct = [];\n    this.xVal = [];\n    this.xSteps = [singleStep || false];\n    this.xNumSteps = [false];\n    this.xHighestCompleteStep = [];\n    this.snap = snap;\n    var index;\n    var ordered = []; // [0, 'min'], [1, '50%'], [2, 'max']\n    // Map the object keys to an array.\n\n    for (index in entry) {\n      if (entry.hasOwnProperty(index)) {\n        ordered.push([entry[index], index]);\n      }\n    } // Sort all entries by value (numeric sort).\n\n\n    if (ordered.length && typeof ordered[0][0] === \"object\") {\n      ordered.sort(function (a, b) {\n        return a[0][0] - b[0][0];\n      });\n    } else {\n      ordered.sort(function (a, b) {\n        return a[0] - b[0];\n      });\n    } // Convert all entries to subranges.\n\n\n    for (index = 0; index < ordered.length; index++) {\n      handleEntryPoint(ordered[index][1], ordered[index][0], this);\n    } // Store the actual step values.\n    // xSteps is sorted in the same order as xPct and xVal.\n\n\n    this.xNumSteps = this.xSteps.slice(0); // Convert all numeric steps to the percentage of the subrange they represent.\n\n    for (index = 0; index < this.xNumSteps.length; index++) {\n      handleStepPoint(index, this.xNumSteps[index], this);\n    }\n  }\n\n  Spectrum.prototype.getDistance = function (value) {\n    var index;\n    var distances = [];\n\n    for (index = 0; index < this.xNumSteps.length - 1; index++) {\n      // last \"range\" can't contain step size as it is purely an endpoint.\n      var step = this.xNumSteps[index];\n\n      if (step && value / step % 1 !== 0) {\n        throw new Error(\"noUiSlider (\" + VERSION + \"): 'limit', 'margin' and 'padding' of \" + this.xPct[index] + \"% range must be divisible by step.\");\n      } // Calculate percentual distance in current range of limit, margin or padding\n\n\n      distances[index] = fromPercentage(this.xVal, value, index);\n    }\n\n    return distances;\n  }; // Calculate the percentual distance over the whole scale of ranges.\n  // direction: 0 = backwards / 1 = forwards\n\n\n  Spectrum.prototype.getAbsoluteDistance = function (value, distances, direction) {\n    var xPct_index = 0; // Calculate range where to start calculation\n\n    if (value < this.xPct[this.xPct.length - 1]) {\n      while (value > this.xPct[xPct_index + 1]) {\n        xPct_index++;\n      }\n    } else if (value === this.xPct[this.xPct.length - 1]) {\n      xPct_index = this.xPct.length - 2;\n    } // If looking backwards and the value is exactly at a range separator then look one range further\n\n\n    if (!direction && value === this.xPct[xPct_index + 1]) {\n      xPct_index++;\n    }\n\n    var start_factor;\n    var rest_factor = 1;\n    var rest_rel_distance = distances[xPct_index];\n    var range_pct = 0;\n    var rel_range_distance = 0;\n    var abs_distance_counter = 0;\n    var range_counter = 0; // Calculate what part of the start range the value is\n\n    if (direction) {\n      start_factor = (value - this.xPct[xPct_index]) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);\n    } else {\n      start_factor = (this.xPct[xPct_index + 1] - value) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);\n    } // Do until the complete distance across ranges is calculated\n\n\n    while (rest_rel_distance > 0) {\n      // Calculate the percentage of total range\n      range_pct = this.xPct[xPct_index + 1 + range_counter] - this.xPct[xPct_index + range_counter]; // Detect if the margin, padding or limit is larger then the current range and calculate\n\n      if (distances[xPct_index + range_counter] * rest_factor + 100 - start_factor * 100 > 100) {\n        // If larger then take the percentual distance of the whole range\n        rel_range_distance = range_pct * start_factor; // Rest factor of relative percentual distance still to be calculated\n\n        rest_factor = (rest_rel_distance - 100 * start_factor) / distances[xPct_index + range_counter]; // Set start factor to 1 as for next range it does not apply.\n\n        start_factor = 1;\n      } else {\n        // If smaller or equal then take the percentual distance of the calculate percentual part of that range\n        rel_range_distance = distances[xPct_index + range_counter] * range_pct / 100 * rest_factor; // No rest left as the rest fits in current range\n\n        rest_factor = 0;\n      }\n\n      if (direction) {\n        abs_distance_counter = abs_distance_counter - rel_range_distance; // Limit range to first range when distance becomes outside of minimum range\n\n        if (this.xPct.length + range_counter >= 1) {\n          range_counter--;\n        }\n      } else {\n        abs_distance_counter = abs_distance_counter + rel_range_distance; // Limit range to last range when distance becomes outside of maximum range\n\n        if (this.xPct.length - range_counter >= 1) {\n          range_counter++;\n        }\n      } // Rest of relative percentual distance still to be calculated\n\n\n      rest_rel_distance = distances[xPct_index + range_counter] * rest_factor;\n    }\n\n    return value + abs_distance_counter;\n  };\n\n  Spectrum.prototype.toStepping = function (value) {\n    value = toStepping(this.xVal, this.xPct, value);\n    return value;\n  };\n\n  Spectrum.prototype.fromStepping = function (value) {\n    return fromStepping(this.xVal, this.xPct, value);\n  };\n\n  Spectrum.prototype.getStep = function (value) {\n    value = getStep(this.xPct, this.xSteps, this.snap, value);\n    return value;\n  };\n\n  Spectrum.prototype.getDefaultStep = function (value, isDown, size) {\n    var j = getJ(value, this.xPct); // When at the top or stepping down, look at the previous sub-range\n\n    if (value === 100 || isDown && value === this.xPct[j - 1]) {\n      j = Math.max(j - 1, 1);\n    }\n\n    return (this.xVal[j] - this.xVal[j - 1]) / size;\n  };\n\n  Spectrum.prototype.getNearbySteps = function (value) {\n    var j = getJ(value, this.xPct);\n    return {\n      stepBefore: {\n        startValue: this.xVal[j - 2],\n        step: this.xNumSteps[j - 2],\n        highestStep: this.xHighestCompleteStep[j - 2]\n      },\n      thisStep: {\n        startValue: this.xVal[j - 1],\n        step: this.xNumSteps[j - 1],\n        highestStep: this.xHighestCompleteStep[j - 1]\n      },\n      stepAfter: {\n        startValue: this.xVal[j],\n        step: this.xNumSteps[j],\n        highestStep: this.xHighestCompleteStep[j]\n      }\n    };\n  };\n\n  Spectrum.prototype.countStepDecimals = function () {\n    var stepDecimals = this.xNumSteps.map(countDecimals);\n    return Math.max.apply(null, stepDecimals);\n  }; // Outside testing\n\n\n  Spectrum.prototype.convert = function (value) {\n    return this.getStep(this.toStepping(value));\n  }; //endregion\n  //region Options\n\n  /*\tEvery input option is tested and parsed. This'll prevent\n      endless validation in internal methods. These tests are\n      structured with an item for every option available. An\n      option can be marked as required by setting the 'r' flag.\n      The testing function is provided with three arguments:\n          - The provided value for the option;\n          - A reference to the options object;\n          - The name for the option;\n       The testing function returns false when an error is detected,\n      or true when everything is OK. It can also modify the option\n      object, to make sure all values can be correctly looped elsewhere. */\n  //region Defaults\n\n\n  var defaultFormatter = {\n    to: function (value) {\n      return value !== undefined && value.toFixed(2);\n    },\n    from: Number\n  };\n  var cssClasses = {\n    target: \"target\",\n    base: \"base\",\n    origin: \"origin\",\n    handle: \"handle\",\n    handleLower: \"handle-lower\",\n    handleUpper: \"handle-upper\",\n    touchArea: \"touch-area\",\n    horizontal: \"horizontal\",\n    vertical: \"vertical\",\n    background: \"background\",\n    connect: \"connect\",\n    connects: \"connects\",\n    ltr: \"ltr\",\n    rtl: \"rtl\",\n    textDirectionLtr: \"txt-dir-ltr\",\n    textDirectionRtl: \"txt-dir-rtl\",\n    draggable: \"draggable\",\n    drag: \"state-drag\",\n    tap: \"state-tap\",\n    active: \"active\",\n    tooltip: \"tooltip\",\n    pips: \"pips\",\n    pipsHorizontal: \"pips-horizontal\",\n    pipsVertical: \"pips-vertical\",\n    marker: \"marker\",\n    markerHorizontal: \"marker-horizontal\",\n    markerVertical: \"marker-vertical\",\n    markerNormal: \"marker-normal\",\n    markerLarge: \"marker-large\",\n    markerSub: \"marker-sub\",\n    value: \"value\",\n    valueHorizontal: \"value-horizontal\",\n    valueVertical: \"value-vertical\",\n    valueNormal: \"value-normal\",\n    valueLarge: \"value-large\",\n    valueSub: \"value-sub\"\n  }; //endregion\n\n  function validateFormat(entry) {\n    // Any object with a to and from method is supported.\n    if (isValidFormatter(entry)) {\n      return true;\n    }\n\n    throw new Error(\"noUiSlider (\" + VERSION + \"): 'format' requires 'to' and 'from' methods.\");\n  }\n\n  function testStep(parsed, entry) {\n    if (!isNumeric(entry)) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'step' is not numeric.\");\n    } // The step option can still be used to set stepping\n    // for linear sliders. Overwritten if set in 'range'.\n\n\n    parsed.singleStep = entry;\n  }\n\n  function testRange(parsed, entry) {\n    // Filter incorrect input.\n    if (typeof entry !== \"object\" || Array.isArray(entry)) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'range' is not an object.\");\n    } // Catch missing start or end.\n\n\n    if (entry.min === undefined || entry.max === undefined) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): Missing 'min' or 'max' in 'range'.\");\n    } // Catch equal start or end.\n\n\n    if (entry.min === entry.max) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'range' 'min' and 'max' cannot be equal.\");\n    }\n\n    parsed.spectrum = new Spectrum(entry, parsed.snap, parsed.singleStep);\n  }\n\n  function testStart(parsed, entry) {\n    entry = asArray(entry); // Validate input. Values aren't tested, as the public .val method\n    // will always provide a valid location.\n\n    if (!Array.isArray(entry) || !entry.length) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'start' option is incorrect.\");\n    } // Store the number of handles.\n\n\n    parsed.handles = entry.length; // When the slider is initialized, the .val method will\n    // be called with the start options.\n\n    parsed.start = entry;\n  }\n\n  function testSnap(parsed, entry) {\n    // Enforce 100% stepping within subranges.\n    parsed.snap = entry;\n\n    if (typeof entry !== \"boolean\") {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'snap' option must be a boolean.\");\n    }\n  }\n\n  function testAnimate(parsed, entry) {\n    // Enforce 100% stepping within subranges.\n    parsed.animate = entry;\n\n    if (typeof entry !== \"boolean\") {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'animate' option must be a boolean.\");\n    }\n  }\n\n  function testAnimationDuration(parsed, entry) {\n    parsed.animationDuration = entry;\n\n    if (typeof entry !== \"number\") {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'animationDuration' option must be a number.\");\n    }\n  }\n\n  function testConnect(parsed, entry) {\n    var connect = [false];\n    var i; // Map legacy options\n\n    if (entry === \"lower\") {\n      entry = [true, false];\n    } else if (entry === \"upper\") {\n      entry = [false, true];\n    } // Handle boolean options\n\n\n    if (entry === true || entry === false) {\n      for (i = 1; i < parsed.handles; i++) {\n        connect.push(entry);\n      }\n\n      connect.push(false);\n    } // Reject invalid input\n    else if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) {\n        throw new Error(\"noUiSlider (\" + VERSION + \"): 'connect' option doesn't match handle count.\");\n      } else {\n        connect = entry;\n      }\n\n    parsed.connect = connect;\n  }\n\n  function testOrientation(parsed, entry) {\n    // Set orientation to an a numerical value for easy\n    // array selection.\n    switch (entry) {\n      case \"horizontal\":\n        parsed.ort = 0;\n        break;\n\n      case \"vertical\":\n        parsed.ort = 1;\n        break;\n\n      default:\n        throw new Error(\"noUiSlider (\" + VERSION + \"): 'orientation' option is invalid.\");\n    }\n  }\n\n  function testMargin(parsed, entry) {\n    if (!isNumeric(entry)) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'margin' option must be numeric.\");\n    } // Issue #582\n\n\n    if (entry === 0) {\n      return;\n    }\n\n    parsed.margin = parsed.spectrum.getDistance(entry);\n  }\n\n  function testLimit(parsed, entry) {\n    if (!isNumeric(entry)) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'limit' option must be numeric.\");\n    }\n\n    parsed.limit = parsed.spectrum.getDistance(entry);\n\n    if (!parsed.limit || parsed.handles < 2) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'limit' option is only supported on linear sliders with 2 or more handles.\");\n    }\n  }\n\n  function testPadding(parsed, entry) {\n    var index;\n\n    if (!isNumeric(entry) && !Array.isArray(entry)) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'padding' option must be numeric or array of exactly 2 numbers.\");\n    }\n\n    if (Array.isArray(entry) && !(entry.length === 2 || isNumeric(entry[0]) || isNumeric(entry[1]))) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'padding' option must be numeric or array of exactly 2 numbers.\");\n    }\n\n    if (entry === 0) {\n      return;\n    }\n\n    if (!Array.isArray(entry)) {\n      entry = [entry, entry];\n    } // 'getDistance' returns false for invalid values.\n\n\n    parsed.padding = [parsed.spectrum.getDistance(entry[0]), parsed.spectrum.getDistance(entry[1])];\n\n    for (index = 0; index < parsed.spectrum.xNumSteps.length - 1; index++) {\n      // last \"range\" can't contain step size as it is purely an endpoint.\n      if (parsed.padding[0][index] < 0 || parsed.padding[1][index] < 0) {\n        throw new Error(\"noUiSlider (\" + VERSION + \"): 'padding' option must be a positive number(s).\");\n      }\n    }\n\n    var totalPadding = entry[0] + entry[1];\n    var firstValue = parsed.spectrum.xVal[0];\n    var lastValue = parsed.spectrum.xVal[parsed.spectrum.xVal.length - 1];\n\n    if (totalPadding / (lastValue - firstValue) > 1) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'padding' option must not exceed 100% of the range.\");\n    }\n  }\n\n  function testDirection(parsed, entry) {\n    // Set direction as a numerical value for easy parsing.\n    // Invert connection for RTL sliders, so that the proper\n    // handles get the connect/background classes.\n    switch (entry) {\n      case \"ltr\":\n        parsed.dir = 0;\n        break;\n\n      case \"rtl\":\n        parsed.dir = 1;\n        break;\n\n      default:\n        throw new Error(\"noUiSlider (\" + VERSION + \"): 'direction' option was not recognized.\");\n    }\n  }\n\n  function testBehaviour(parsed, entry) {\n    // Make sure the input is a string.\n    if (typeof entry !== \"string\") {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'behaviour' must be a string containing options.\");\n    } // Check if the string contains any keywords.\n    // None are required.\n\n\n    var tap = entry.indexOf(\"tap\") >= 0;\n    var drag = entry.indexOf(\"drag\") >= 0;\n    var fixed = entry.indexOf(\"fixed\") >= 0;\n    var snap = entry.indexOf(\"snap\") >= 0;\n    var hover = entry.indexOf(\"hover\") >= 0;\n    var unconstrained = entry.indexOf(\"unconstrained\") >= 0;\n\n    if (fixed) {\n      if (parsed.handles !== 2) {\n        throw new Error(\"noUiSlider (\" + VERSION + \"): 'fixed' behaviour must be used with 2 handles\");\n      } // Use margin to enforce fixed state\n\n\n      testMargin(parsed, parsed.start[1] - parsed.start[0]);\n    }\n\n    if (unconstrained && (parsed.margin || parsed.limit)) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'unconstrained' behaviour cannot be used with margin or limit\");\n    }\n\n    parsed.events = {\n      tap: tap || snap,\n      drag: drag,\n      fixed: fixed,\n      snap: snap,\n      hover: hover,\n      unconstrained: unconstrained\n    };\n  }\n\n  function testTooltips(parsed, entry) {\n    if (entry === false) {\n      return;\n    }\n\n    if (entry === true) {\n      parsed.tooltips = [];\n\n      for (var i = 0; i < parsed.handles; i++) {\n        parsed.tooltips.push(true);\n      }\n    } else {\n      parsed.tooltips = asArray(entry);\n\n      if (parsed.tooltips.length !== parsed.handles) {\n        throw new Error(\"noUiSlider (\" + VERSION + \"): must pass a formatter for all handles.\");\n      }\n\n      parsed.tooltips.forEach(function (formatter) {\n        if (typeof formatter !== \"boolean\" && (typeof formatter !== \"object\" || typeof formatter.to !== \"function\")) {\n          throw new Error(\"noUiSlider (\" + VERSION + \"): 'tooltips' must be passed a formatter or 'false'.\");\n        }\n      });\n    }\n  }\n\n  function testAriaFormat(parsed, entry) {\n    parsed.ariaFormat = entry;\n    validateFormat(entry);\n  }\n\n  function testFormat(parsed, entry) {\n    parsed.format = entry;\n    validateFormat(entry);\n  }\n\n  function testKeyboardSupport(parsed, entry) {\n    parsed.keyboardSupport = entry;\n\n    if (typeof entry !== \"boolean\") {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'keyboardSupport' option must be a boolean.\");\n    }\n  }\n\n  function testDocumentElement(parsed, entry) {\n    // This is an advanced option. Passed values are used without validation.\n    parsed.documentElement = entry;\n  }\n\n  function testCssPrefix(parsed, entry) {\n    if (typeof entry !== \"string\" && entry !== false) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'cssPrefix' must be a string or `false`.\");\n    }\n\n    parsed.cssPrefix = entry;\n  }\n\n  function testCssClasses(parsed, entry) {\n    if (typeof entry !== \"object\") {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): 'cssClasses' must be an object.\");\n    }\n\n    if (typeof parsed.cssPrefix === \"string\") {\n      parsed.cssClasses = {};\n\n      for (var key in entry) {\n        if (!entry.hasOwnProperty(key)) {\n          continue;\n        }\n\n        parsed.cssClasses[key] = parsed.cssPrefix + entry[key];\n      }\n    } else {\n      parsed.cssClasses = entry;\n    }\n  } // Test all developer settings and parse to assumption-safe values.\n\n\n  function testOptions(options) {\n    // To prove a fix for #537, freeze options here.\n    // If the object is modified, an error will be thrown.\n    // Object.freeze(options);\n    var parsed = {\n      margin: 0,\n      limit: 0,\n      padding: 0,\n      animate: true,\n      animationDuration: 300,\n      ariaFormat: defaultFormatter,\n      format: defaultFormatter\n    }; // Tests are executed in the order they are presented here.\n\n    var tests = {\n      step: {\n        r: false,\n        t: testStep\n      },\n      start: {\n        r: true,\n        t: testStart\n      },\n      connect: {\n        r: true,\n        t: testConnect\n      },\n      direction: {\n        r: true,\n        t: testDirection\n      },\n      snap: {\n        r: false,\n        t: testSnap\n      },\n      animate: {\n        r: false,\n        t: testAnimate\n      },\n      animationDuration: {\n        r: false,\n        t: testAnimationDuration\n      },\n      range: {\n        r: true,\n        t: testRange\n      },\n      orientation: {\n        r: false,\n        t: testOrientation\n      },\n      margin: {\n        r: false,\n        t: testMargin\n      },\n      limit: {\n        r: false,\n        t: testLimit\n      },\n      padding: {\n        r: false,\n        t: testPadding\n      },\n      behaviour: {\n        r: true,\n        t: testBehaviour\n      },\n      ariaFormat: {\n        r: false,\n        t: testAriaFormat\n      },\n      format: {\n        r: false,\n        t: testFormat\n      },\n      tooltips: {\n        r: false,\n        t: testTooltips\n      },\n      keyboardSupport: {\n        r: true,\n        t: testKeyboardSupport\n      },\n      documentElement: {\n        r: false,\n        t: testDocumentElement\n      },\n      cssPrefix: {\n        r: true,\n        t: testCssPrefix\n      },\n      cssClasses: {\n        r: true,\n        t: testCssClasses\n      }\n    };\n    var defaults = {\n      connect: false,\n      direction: \"ltr\",\n      behaviour: \"tap\",\n      orientation: \"horizontal\",\n      keyboardSupport: true,\n      cssPrefix: \"noUi-\",\n      cssClasses: cssClasses\n    }; // AriaFormat defaults to regular format, if any.\n\n    if (options.format && !options.ariaFormat) {\n      options.ariaFormat = options.format;\n    } // Run all options through a testing mechanism to ensure correct\n    // input. It should be noted that options might get modified to\n    // be handled properly. E.g. wrapping integers in arrays.\n\n\n    Object.keys(tests).forEach(function (name) {\n      // If the option isn't set, but it is required, throw an error.\n      if (!isSet(options[name]) && defaults[name] === undefined) {\n        if (tests[name].r) {\n          throw new Error(\"noUiSlider (\" + VERSION + \"): '\" + name + \"' is required.\");\n        }\n\n        return true;\n      }\n\n      tests[name].t(parsed, !isSet(options[name]) ? defaults[name] : options[name]);\n    }); // Forward pips options\n\n    parsed.pips = options.pips; // All recent browsers accept unprefixed transform.\n    // We need -ms- for IE9 and -webkit- for older Android;\n    // Assume use of -webkit- if unprefixed and -ms- are not supported.\n    // https://caniuse.com/#feat=transforms2d\n\n    var d = document.createElement(\"div\");\n    var msPrefix = d.style.msTransform !== undefined;\n    var noPrefix = d.style.transform !== undefined;\n    parsed.transformRule = noPrefix ? \"transform\" : msPrefix ? \"msTransform\" : \"webkitTransform\"; // Pips don't move, so we can place them using left/top.\n\n    var styles = [[\"left\", \"top\"], [\"right\", \"bottom\"]];\n    parsed.style = styles[parsed.dir][parsed.ort];\n    return parsed;\n  } //endregion\n\n\n  function scope(target, options, originalOptions) {\n    var actions = getActions();\n    var supportsTouchActionNone = getSupportsTouchActionNone();\n    var supportsPassive = supportsTouchActionNone && getSupportsPassive(); // All variables local to 'scope' are prefixed with 'scope_'\n    // Slider DOM Nodes\n\n    var scope_Target = target;\n    var scope_Base;\n    var scope_Handles;\n    var scope_Connects;\n    var scope_Pips;\n    var scope_Tooltips; // Slider state values\n\n    var scope_Spectrum = options.spectrum;\n    var scope_Values = [];\n    var scope_Locations = [];\n    var scope_HandleNumbers = [];\n    var scope_ActiveHandlesCount = 0;\n    var scope_Events = {}; // Exposed API\n\n    var scope_Self; // Document Nodes\n\n    var scope_Document = target.ownerDocument;\n    var scope_DocumentElement = options.documentElement || scope_Document.documentElement;\n    var scope_Body = scope_Document.body; // Pips constants\n\n    var PIPS_NONE = -1;\n    var PIPS_NO_VALUE = 0;\n    var PIPS_LARGE_VALUE = 1;\n    var PIPS_SMALL_VALUE = 2; // For horizontal sliders in standard ltr documents,\n    // make .noUi-origin overflow to the left so the document doesn't scroll.\n\n    var scope_DirOffset = scope_Document.dir === \"rtl\" || options.ort === 1 ? 0 : 100; // Creates a node, adds it to target, returns the new node.\n\n    function addNodeTo(addTarget, className) {\n      var div = scope_Document.createElement(\"div\");\n\n      if (className) {\n        addClass(div, className);\n      }\n\n      addTarget.appendChild(div);\n      return div;\n    } // Append a origin to the base\n\n\n    function addOrigin(base, handleNumber) {\n      var origin = addNodeTo(base, options.cssClasses.origin);\n      var handle = addNodeTo(origin, options.cssClasses.handle);\n      addNodeTo(handle, options.cssClasses.touchArea);\n      handle.setAttribute(\"data-handle\", handleNumber);\n\n      if (options.keyboardSupport) {\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\n        // 0 = focusable and reachable\n        handle.setAttribute(\"tabindex\", \"0\");\n        handle.addEventListener(\"keydown\", function (event) {\n          return eventKeydown(event, handleNumber);\n        });\n      }\n\n      handle.setAttribute(\"role\", \"slider\");\n      handle.setAttribute(\"aria-orientation\", options.ort ? \"vertical\" : \"horizontal\");\n\n      if (handleNumber === 0) {\n        addClass(handle, options.cssClasses.handleLower);\n      } else if (handleNumber === options.handles - 1) {\n        addClass(handle, options.cssClasses.handleUpper);\n      }\n\n      return origin;\n    } // Insert nodes for connect elements\n\n\n    function addConnect(base, add) {\n      if (!add) {\n        return false;\n      }\n\n      return addNodeTo(base, options.cssClasses.connect);\n    } // Add handles to the slider base.\n\n\n    function addElements(connectOptions, base) {\n      var connectBase = addNodeTo(base, options.cssClasses.connects);\n      scope_Handles = [];\n      scope_Connects = [];\n      scope_Connects.push(addConnect(connectBase, connectOptions[0])); // [::::O====O====O====]\n      // connectOptions = [0, 1, 1, 1]\n\n      for (var i = 0; i < options.handles; i++) {\n        // Keep a list of all added handles.\n        scope_Handles.push(addOrigin(base, i));\n        scope_HandleNumbers[i] = i;\n        scope_Connects.push(addConnect(connectBase, connectOptions[i + 1]));\n      }\n    } // Initialize a single slider.\n\n\n    function addSlider(addTarget) {\n      // Apply classes and data to the target.\n      addClass(addTarget, options.cssClasses.target);\n\n      if (options.dir === 0) {\n        addClass(addTarget, options.cssClasses.ltr);\n      } else {\n        addClass(addTarget, options.cssClasses.rtl);\n      }\n\n      if (options.ort === 0) {\n        addClass(addTarget, options.cssClasses.horizontal);\n      } else {\n        addClass(addTarget, options.cssClasses.vertical);\n      }\n\n      var textDirection = getComputedStyle(addTarget).direction;\n\n      if (textDirection === \"rtl\") {\n        addClass(addTarget, options.cssClasses.textDirectionRtl);\n      } else {\n        addClass(addTarget, options.cssClasses.textDirectionLtr);\n      }\n\n      return addNodeTo(addTarget, options.cssClasses.base);\n    }\n\n    function addTooltip(handle, handleNumber) {\n      if (!options.tooltips[handleNumber]) {\n        return false;\n      }\n\n      return addNodeTo(handle.firstChild, options.cssClasses.tooltip);\n    }\n\n    function isSliderDisabled() {\n      return scope_Target.hasAttribute(\"disabled\");\n    } // Disable the slider dragging if any handle is disabled\n\n\n    function isHandleDisabled(handleNumber) {\n      var handleOrigin = scope_Handles[handleNumber];\n      return handleOrigin.hasAttribute(\"disabled\");\n    }\n\n    function removeTooltips() {\n      if (scope_Tooltips) {\n        removeEvent(\"update.tooltips\");\n        scope_Tooltips.forEach(function (tooltip) {\n          if (tooltip) {\n            removeElement(tooltip);\n          }\n        });\n        scope_Tooltips = null;\n      }\n    } // The tooltips option is a shorthand for using the 'update' event.\n\n\n    function tooltips() {\n      removeTooltips(); // Tooltips are added with options.tooltips in original order.\n\n      scope_Tooltips = scope_Handles.map(addTooltip);\n      bindEvent(\"update.tooltips\", function (values, handleNumber, unencoded) {\n        if (!scope_Tooltips[handleNumber]) {\n          return;\n        }\n\n        var formattedValue = values[handleNumber];\n\n        if (options.tooltips[handleNumber] !== true) {\n          formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);\n        }\n\n        scope_Tooltips[handleNumber].innerHTML = formattedValue;\n      });\n    }\n\n    function aria() {\n      bindEvent(\"update\", function (values, handleNumber, unencoded, tap, positions) {\n        // Update Aria Values for all handles, as a change in one changes min and max values for the next.\n        scope_HandleNumbers.forEach(function (index) {\n          var handle = scope_Handles[index];\n          var min = checkHandlePosition(scope_Locations, index, 0, true, true, true);\n          var max = checkHandlePosition(scope_Locations, index, 100, true, true, true);\n          var now = positions[index]; // Formatted value for display\n\n          var text = options.ariaFormat.to(unencoded[index]); // Map to slider range values\n\n          min = scope_Spectrum.fromStepping(min).toFixed(1);\n          max = scope_Spectrum.fromStepping(max).toFixed(1);\n          now = scope_Spectrum.fromStepping(now).toFixed(1);\n          handle.children[0].setAttribute(\"aria-valuemin\", min);\n          handle.children[0].setAttribute(\"aria-valuemax\", max);\n          handle.children[0].setAttribute(\"aria-valuenow\", now);\n          handle.children[0].setAttribute(\"aria-valuetext\", text);\n        });\n      });\n    }\n\n    function getGroup(mode, values, stepped) {\n      // Use the range.\n      if (mode === \"range\" || mode === \"steps\") {\n        return scope_Spectrum.xVal;\n      }\n\n      if (mode === \"count\") {\n        if (values < 2) {\n          throw new Error(\"noUiSlider (\" + VERSION + \"): 'values' (>= 2) required for mode 'count'.\");\n        } // Divide 0 - 100 in 'count' parts.\n\n\n        var interval = values - 1;\n        var spread = 100 / interval;\n        values = []; // List these parts and have them handled as 'positions'.\n\n        while (interval--) {\n          values[interval] = interval * spread;\n        }\n\n        values.push(100);\n        mode = \"positions\";\n      }\n\n      if (mode === \"positions\") {\n        // Map all percentages to on-range values.\n        return values.map(function (value) {\n          return scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);\n        });\n      }\n\n      if (mode === \"values\") {\n        // If the value must be stepped, it needs to be converted to a percentage first.\n        if (stepped) {\n          return values.map(function (value) {\n            // Convert to percentage, apply step, return to value.\n            return scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));\n          });\n        } // Otherwise, we can simply use the values.\n\n\n        return values;\n      }\n    }\n\n    function generateSpread(density, mode, group) {\n      function safeIncrement(value, increment) {\n        // Avoid floating point variance by dropping the smallest decimal places.\n        return (value + increment).toFixed(7) / 1;\n      }\n\n      var indexes = {};\n      var firstInRange = scope_Spectrum.xVal[0];\n      var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];\n      var ignoreFirst = false;\n      var ignoreLast = false;\n      var prevPct = 0; // Create a copy of the group, sort it and filter away all duplicates.\n\n      group = unique(group.slice().sort(function (a, b) {\n        return a - b;\n      })); // Make sure the range starts with the first element.\n\n      if (group[0] !== firstInRange) {\n        group.unshift(firstInRange);\n        ignoreFirst = true;\n      } // Likewise for the last one.\n\n\n      if (group[group.length - 1] !== lastInRange) {\n        group.push(lastInRange);\n        ignoreLast = true;\n      }\n\n      group.forEach(function (current, index) {\n        // Get the current step and the lower + upper positions.\n        var step;\n        var i;\n        var q;\n        var low = current;\n        var high = group[index + 1];\n        var newPct;\n        var pctDifference;\n        var pctPos;\n        var type;\n        var steps;\n        var realSteps;\n        var stepSize;\n        var isSteps = mode === \"steps\"; // When using 'steps' mode, use the provided steps.\n        // Otherwise, we'll step on to the next subrange.\n\n        if (isSteps) {\n          step = scope_Spectrum.xNumSteps[index];\n        } // Default to a 'full' step.\n\n\n        if (!step) {\n          step = high - low;\n        } // Low can be 0, so test for false. If high is undefined,\n        // we are at the last subrange. Index 0 is already handled.\n\n\n        if (low === false || high === undefined) {\n          return;\n        } // Make sure step isn't 0, which would cause an infinite loop (#654)\n\n\n        step = Math.max(step, 0.0000001); // Find all steps in the subrange.\n\n        for (i = low; i <= high; i = safeIncrement(i, step)) {\n          // Get the percentage value for the current step,\n          // calculate the size for the subrange.\n          newPct = scope_Spectrum.toStepping(i);\n          pctDifference = newPct - prevPct;\n          steps = pctDifference / density;\n          realSteps = Math.round(steps); // This ratio represents the amount of percentage-space a point indicates.\n          // For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-divided.\n          // Round the percentage offset to an even number, then divide by two\n          // to spread the offset on both sides of the range.\n\n          stepSize = pctDifference / realSteps; // Divide all points evenly, adding the correct number to this subrange.\n          // Run up to <= so that 100% gets a point, event if ignoreLast is set.\n\n          for (q = 1; q <= realSteps; q += 1) {\n            // The ratio between the rounded value and the actual size might be ~1% off.\n            // Correct the percentage offset by the number of points\n            // per subrange. density = 1 will result in 100 points on the\n            // full range, 2 for 50, 4 for 25, etc.\n            pctPos = prevPct + q * stepSize;\n            indexes[pctPos.toFixed(5)] = [scope_Spectrum.fromStepping(pctPos), 0];\n          } // Determine the point type.\n\n\n          type = group.indexOf(i) > -1 ? PIPS_LARGE_VALUE : isSteps ? PIPS_SMALL_VALUE : PIPS_NO_VALUE; // Enforce the 'ignoreFirst' option by overwriting the type for 0.\n\n          if (!index && ignoreFirst && i !== high) {\n            type = 0;\n          }\n\n          if (!(i === high && ignoreLast)) {\n            // Mark the 'type' of this point. 0 = plain, 1 = real value, 2 = step value.\n            indexes[newPct.toFixed(5)] = [i, type];\n          } // Update the percentage count.\n\n\n          prevPct = newPct;\n        }\n      });\n      return indexes;\n    }\n\n    function addMarking(spread, filterFunc, formatter) {\n      var element = scope_Document.createElement(\"div\");\n      var valueSizeClasses = [];\n      valueSizeClasses[PIPS_NO_VALUE] = options.cssClasses.valueNormal;\n      valueSizeClasses[PIPS_LARGE_VALUE] = options.cssClasses.valueLarge;\n      valueSizeClasses[PIPS_SMALL_VALUE] = options.cssClasses.valueSub;\n      var markerSizeClasses = [];\n      markerSizeClasses[PIPS_NO_VALUE] = options.cssClasses.markerNormal;\n      markerSizeClasses[PIPS_LARGE_VALUE] = options.cssClasses.markerLarge;\n      markerSizeClasses[PIPS_SMALL_VALUE] = options.cssClasses.markerSub;\n      var valueOrientationClasses = [options.cssClasses.valueHorizontal, options.cssClasses.valueVertical];\n      var markerOrientationClasses = [options.cssClasses.markerHorizontal, options.cssClasses.markerVertical];\n      addClass(element, options.cssClasses.pips);\n      addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);\n\n      function getClasses(type, source) {\n        var a = source === options.cssClasses.value;\n        var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;\n        var sizeClasses = a ? valueSizeClasses : markerSizeClasses;\n        return source + \" \" + orientationClasses[options.ort] + \" \" + sizeClasses[type];\n      }\n\n      function addSpread(offset, value, type) {\n        // Apply the filter function, if it is set.\n        type = filterFunc ? filterFunc(value, type) : type;\n\n        if (type === PIPS_NONE) {\n          return;\n        } // Add a marker for every point\n\n\n        var node = addNodeTo(element, false);\n        node.className = getClasses(type, options.cssClasses.marker);\n        node.style[options.style] = offset + \"%\"; // Values are only appended for points marked '1' or '2'.\n\n        if (type > PIPS_NO_VALUE) {\n          node = addNodeTo(element, false);\n          node.className = getClasses(type, options.cssClasses.value);\n          node.setAttribute(\"data-value\", value);\n          node.style[options.style] = offset + \"%\";\n          node.innerHTML = formatter.to(value);\n        }\n      } // Append all points.\n\n\n      Object.keys(spread).forEach(function (offset) {\n        addSpread(offset, spread[offset][0], spread[offset][1]);\n      });\n      return element;\n    }\n\n    function removePips() {\n      if (scope_Pips) {\n        removeElement(scope_Pips);\n        scope_Pips = null;\n      }\n    }\n\n    function pips(grid) {\n      // Fix #669\n      removePips();\n      var mode = grid.mode;\n      var density = grid.density || 1;\n      var filter = grid.filter || false;\n      var values = grid.values || false;\n      var stepped = grid.stepped || false;\n      var group = getGroup(mode, values, stepped);\n      var spread = generateSpread(density, mode, group);\n      var format = grid.format || {\n        to: Math.round\n      };\n      scope_Pips = scope_Target.appendChild(addMarking(spread, filter, format));\n      return scope_Pips;\n    } // Shorthand for base dimensions.\n\n\n    function baseSize() {\n      var rect = scope_Base.getBoundingClientRect();\n      var alt = \"offset\" + [\"Width\", \"Height\"][options.ort];\n      return options.ort === 0 ? rect.width || scope_Base[alt] : rect.height || scope_Base[alt];\n    } // Handler for attaching events trough a proxy.\n\n\n    function attachEvent(events, element, callback, data) {\n      // This function can be used to 'filter' events to the slider.\n      // element is a node, not a nodeList\n      var method = function (e) {\n        e = fixEvent(e, data.pageOffset, data.target || element); // fixEvent returns false if this event has a different target\n        // when handling (multi-) touch events;\n\n        if (!e) {\n          return false;\n        } // doNotReject is passed by all end events to make sure released touches\n        // are not rejected, leaving the slider \"stuck\" to the cursor;\n\n\n        if (isSliderDisabled() && !data.doNotReject) {\n          return false;\n        } // Stop if an active 'tap' transition is taking place.\n\n\n        if (hasClass(scope_Target, options.cssClasses.tap) && !data.doNotReject) {\n          return false;\n        } // Ignore right or middle clicks on start #454\n\n\n        if (events === actions.start && e.buttons !== undefined && e.buttons > 1) {\n          return false;\n        } // Ignore right or middle clicks on start #454\n\n\n        if (data.hover && e.buttons) {\n          return false;\n        } // 'supportsPassive' is only true if a browser also supports touch-action: none in CSS.\n        // iOS safari does not, so it doesn't get to benefit from passive scrolling. iOS does support\n        // touch-action: manipulation, but that allows panning, which breaks\n        // sliders after zooming/on non-responsive pages.\n        // See: https://bugs.webkit.org/show_bug.cgi?id=133112\n\n\n        if (!supportsPassive) {\n          e.preventDefault();\n        }\n\n        e.calcPoint = e.points[options.ort]; // Call the event handler with the event [ and additional data ].\n\n        callback(e, data);\n      };\n\n      var methods = []; // Bind a closure on the target for every event type.\n\n      events.split(\" \").forEach(function (eventName) {\n        element.addEventListener(eventName, method, supportsPassive ? {\n          passive: true\n        } : false);\n        methods.push([eventName, method]);\n      });\n      return methods;\n    } // Provide a clean event with standardized offset values.\n\n\n    function fixEvent(e, pageOffset, eventTarget) {\n      // Filter the event to register the type, which can be\n      // touch, mouse or pointer. Offset changes need to be\n      // made on an event specific basis.\n      var touch = e.type.indexOf(\"touch\") === 0;\n      var mouse = e.type.indexOf(\"mouse\") === 0;\n      var pointer = e.type.indexOf(\"pointer\") === 0;\n      var x;\n      var y; // IE10 implemented pointer events with a prefix;\n\n      if (e.type.indexOf(\"MSPointer\") === 0) {\n        pointer = true;\n      } // The only thing one handle should be concerned about is the touches that originated on top of it.\n\n\n      if (touch) {\n        // Returns true if a touch originated on the target.\n        var isTouchOnTarget = function (checkTouch) {\n          return checkTouch.target === eventTarget || eventTarget.contains(checkTouch.target) || checkTouch.target.shadowRoot && checkTouch.target.shadowRoot.contains(eventTarget);\n        }; // In the case of touchstart events, we need to make sure there is still no more than one\n        // touch on the target so we look amongst all touches.\n\n\n        if (e.type === \"touchstart\") {\n          var targetTouches = Array.prototype.filter.call(e.touches, isTouchOnTarget); // Do not support more than one touch per handle.\n\n          if (targetTouches.length > 1) {\n            return false;\n          }\n\n          x = targetTouches[0].pageX;\n          y = targetTouches[0].pageY;\n        } else {\n          // In the other cases, find on changedTouches is enough.\n          var targetTouch = Array.prototype.find.call(e.changedTouches, isTouchOnTarget); // Cancel if the target touch has not moved.\n\n          if (!targetTouch) {\n            return false;\n          }\n\n          x = targetTouch.pageX;\n          y = targetTouch.pageY;\n        }\n      }\n\n      pageOffset = pageOffset || getPageOffset(scope_Document);\n\n      if (mouse || pointer) {\n        x = e.clientX + pageOffset.x;\n        y = e.clientY + pageOffset.y;\n      }\n\n      e.pageOffset = pageOffset;\n      e.points = [x, y];\n      e.cursor = mouse || pointer; // Fix #435\n\n      return e;\n    } // Translate a coordinate in the document to a percentage on the slider\n\n\n    function calcPointToPercentage(calcPoint) {\n      var location = calcPoint - offset(scope_Base, options.ort);\n      var proposal = location * 100 / baseSize(); // Clamp proposal between 0% and 100%\n      // Out-of-bound coordinates may occur when .noUi-base pseudo-elements\n      // are used (e.g. contained handles feature)\n\n      proposal = limit(proposal);\n      return options.dir ? 100 - proposal : proposal;\n    } // Find handle closest to a certain percentage on the slider\n\n\n    function getClosestHandle(clickedPosition) {\n      var smallestDifference = 100;\n      var handleNumber = false;\n      scope_Handles.forEach(function (handle, index) {\n        // Disabled handles are ignored\n        if (isHandleDisabled(index)) {\n          return;\n        }\n\n        var handlePosition = scope_Locations[index];\n        var differenceWithThisHandle = Math.abs(handlePosition - clickedPosition); // Initial state\n\n        var clickAtEdge = differenceWithThisHandle === 100 && smallestDifference === 100; // Difference with this handle is smaller than the previously checked handle\n\n        var isCloser = differenceWithThisHandle < smallestDifference;\n        var isCloserAfter = differenceWithThisHandle <= smallestDifference && clickedPosition > handlePosition;\n\n        if (isCloser || isCloserAfter || clickAtEdge) {\n          handleNumber = index;\n          smallestDifference = differenceWithThisHandle;\n        }\n      });\n      return handleNumber;\n    } // Fire 'end' when a mouse or pen leaves the document.\n\n\n    function documentLeave(event, data) {\n      if (event.type === \"mouseout\" && event.target.nodeName === \"HTML\" && event.relatedTarget === null) {\n        eventEnd(event, data);\n      }\n    } // Handle movement on document for handle and range drag.\n\n\n    function eventMove(event, data) {\n      // Fix #498\n      // Check value of .buttons in 'start' to work around a bug in IE10 mobile (data.buttonsProperty).\n      // https://connect.microsoft.com/IE/feedback/details/927005/mobile-ie10-windows-phone-buttons-property-of-pointermove-event-always-zero\n      // IE9 has .buttons and .which zero on mousemove.\n      // Firefox breaks the spec MDN defines.\n      if (navigator.appVersion.indexOf(\"MSIE 9\") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) {\n        return eventEnd(event, data);\n      } // Check if we are moving up or down\n\n\n      var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint); // Convert the movement into a percentage of the slider width/height\n\n      var proposal = movement * 100 / data.baseSize;\n      moveHandles(movement > 0, proposal, data.locations, data.handleNumbers);\n    } // Unbind move events on document, call callbacks.\n\n\n    function eventEnd(event, data) {\n      // The handle is no longer active, so remove the class.\n      if (data.handle) {\n        removeClass(data.handle, options.cssClasses.active);\n        scope_ActiveHandlesCount -= 1;\n      } // Unbind the move and end events, which are added on 'start'.\n\n\n      data.listeners.forEach(function (c) {\n        scope_DocumentElement.removeEventListener(c[0], c[1]);\n      });\n\n      if (scope_ActiveHandlesCount === 0) {\n        // Remove dragging class.\n        removeClass(scope_Target, options.cssClasses.drag);\n        setZindex(); // Remove cursor styles and text-selection events bound to the body.\n\n        if (event.cursor) {\n          scope_Body.style.cursor = \"\";\n          scope_Body.removeEventListener(\"selectstart\", preventDefault);\n        }\n      }\n\n      data.handleNumbers.forEach(function (handleNumber) {\n        fireEvent(\"change\", handleNumber);\n        fireEvent(\"set\", handleNumber);\n        fireEvent(\"end\", handleNumber);\n      });\n    } // Bind move events on document.\n\n\n    function eventStart(event, data) {\n      // Ignore event if any handle is disabled\n      if (data.handleNumbers.some(isHandleDisabled)) {\n        return false;\n      }\n\n      var handle;\n\n      if (data.handleNumbers.length === 1) {\n        var handleOrigin = scope_Handles[data.handleNumbers[0]];\n        handle = handleOrigin.children[0];\n        scope_ActiveHandlesCount += 1; // Mark the handle as 'active' so it can be styled.\n\n        addClass(handle, options.cssClasses.active);\n      } // A drag should never propagate up to the 'tap' event.\n\n\n      event.stopPropagation(); // Record the event listeners.\n\n      var listeners = []; // Attach the move and end events.\n\n      var moveEvent = attachEvent(actions.move, scope_DocumentElement, eventMove, {\n        // The event target has changed so we need to propagate the original one so that we keep\n        // relying on it to extract target touches.\n        target: event.target,\n        handle: handle,\n        listeners: listeners,\n        startCalcPoint: event.calcPoint,\n        baseSize: baseSize(),\n        pageOffset: event.pageOffset,\n        handleNumbers: data.handleNumbers,\n        buttonsProperty: event.buttons,\n        locations: scope_Locations.slice()\n      });\n      var endEvent = attachEvent(actions.end, scope_DocumentElement, eventEnd, {\n        target: event.target,\n        handle: handle,\n        listeners: listeners,\n        doNotReject: true,\n        handleNumbers: data.handleNumbers\n      });\n      var outEvent = attachEvent(\"mouseout\", scope_DocumentElement, documentLeave, {\n        target: event.target,\n        handle: handle,\n        listeners: listeners,\n        doNotReject: true,\n        handleNumbers: data.handleNumbers\n      }); // We want to make sure we pushed the listeners in the listener list rather than creating\n      // a new one as it has already been passed to the event handlers.\n\n      listeners.push.apply(listeners, moveEvent.concat(endEvent, outEvent)); // Text selection isn't an issue on touch devices,\n      // so adding cursor styles can be skipped.\n\n      if (event.cursor) {\n        // Prevent the 'I' cursor and extend the range-drag cursor.\n        scope_Body.style.cursor = getComputedStyle(event.target).cursor; // Mark the target with a dragging state.\n\n        if (scope_Handles.length > 1) {\n          addClass(scope_Target, options.cssClasses.drag);\n        } // Prevent text selection when dragging the handles.\n        // In noUiSlider <= 9.2.0, this was handled by calling preventDefault on mouse/touch start/move,\n        // which is scroll blocking. The selectstart event is supported by FireFox starting from version 52,\n        // meaning the only holdout is iOS Safari. This doesn't matter: text selection isn't triggered there.\n        // The 'cursor' flag is false.\n        // See: http://caniuse.com/#search=selectstart\n\n\n        scope_Body.addEventListener(\"selectstart\", preventDefault, false);\n      }\n\n      data.handleNumbers.forEach(function (handleNumber) {\n        fireEvent(\"start\", handleNumber);\n      });\n    } // Move closest handle to tapped location.\n\n\n    function eventTap(event) {\n      // The tap event shouldn't propagate up\n      event.stopPropagation();\n      var proposal = calcPointToPercentage(event.calcPoint);\n      var handleNumber = getClosestHandle(proposal); // Tackle the case that all handles are 'disabled'.\n\n      if (handleNumber === false) {\n        return false;\n      } // Flag the slider as it is now in a transitional state.\n      // Transition takes a configurable amount of ms (default 300). Re-enable the slider after that.\n\n\n      if (!options.events.snap) {\n        addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);\n      }\n\n      setHandle(handleNumber, proposal, true, true);\n      setZindex();\n      fireEvent(\"slide\", handleNumber, true);\n      fireEvent(\"update\", handleNumber, true);\n      fireEvent(\"change\", handleNumber, true);\n      fireEvent(\"set\", handleNumber, true);\n\n      if (options.events.snap) {\n        eventStart(event, {\n          handleNumbers: [handleNumber]\n        });\n      }\n    } // Fires a 'hover' event for a hovered mouse/pen position.\n\n\n    function eventHover(event) {\n      var proposal = calcPointToPercentage(event.calcPoint);\n      var to = scope_Spectrum.getStep(proposal);\n      var value = scope_Spectrum.fromStepping(to);\n      Object.keys(scope_Events).forEach(function (targetEvent) {\n        if (\"hover\" === targetEvent.split(\".\")[0]) {\n          scope_Events[targetEvent].forEach(function (callback) {\n            callback.call(scope_Self, value);\n          });\n        }\n      });\n    } // Handles keydown on focused handles\n    // Don't move the document when pressing arrow keys on focused handles\n\n\n    function eventKeydown(event, handleNumber) {\n      if (isSliderDisabled() || isHandleDisabled(handleNumber)) {\n        return false;\n      }\n\n      var horizontalKeys = [\"Left\", \"Right\"];\n      var verticalKeys = [\"Down\", \"Up\"];\n      var largeStepKeys = [\"PageDown\", \"PageUp\"];\n      var edgeKeys = [\"Home\", \"End\"];\n\n      if (options.dir && !options.ort) {\n        // On an right-to-left slider, the left and right keys act inverted\n        horizontalKeys.reverse();\n      } else if (options.ort && !options.dir) {\n        // On a top-to-bottom slider, the up and down keys act inverted\n        verticalKeys.reverse();\n        largeStepKeys.reverse();\n      } // Strip \"Arrow\" for IE compatibility. https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\n\n\n      var key = event.key.replace(\"Arrow\", \"\");\n      var isLargeDown = key === largeStepKeys[0];\n      var isLargeUp = key === largeStepKeys[1];\n      var isDown = key === verticalKeys[0] || key === horizontalKeys[0] || isLargeDown;\n      var isUp = key === verticalKeys[1] || key === horizontalKeys[1] || isLargeUp;\n      var isMin = key === edgeKeys[0];\n      var isMax = key === edgeKeys[1];\n\n      if (!isDown && !isUp && !isMin && !isMax) {\n        return true;\n      }\n\n      event.preventDefault();\n      var to;\n\n      if (isUp || isDown) {\n        var multiplier = 5;\n        var direction = isDown ? 0 : 1;\n        var steps = getNextStepsForHandle(handleNumber);\n        var step = steps[direction]; // At the edge of a slider, do nothing\n\n        if (step === null) {\n          return false;\n        } // No step set, use the default of 10% of the sub-range\n\n\n        if (step === false) {\n          step = scope_Spectrum.getDefaultStep(scope_Locations[handleNumber], isDown, 10);\n        }\n\n        if (isLargeUp || isLargeDown) {\n          step *= multiplier;\n        } // Step over zero-length ranges (#948);\n\n\n        step = Math.max(step, 0.0000001); // Decrement for down steps\n\n        step = (isDown ? -1 : 1) * step;\n        to = scope_Values[handleNumber] + step;\n      } else if (isMax) {\n        // End key\n        to = options.spectrum.xVal[options.spectrum.xVal.length - 1];\n      } else {\n        // Home key\n        to = options.spectrum.xVal[0];\n      }\n\n      setHandle(handleNumber, scope_Spectrum.toStepping(to), true, true);\n      fireEvent(\"slide\", handleNumber);\n      fireEvent(\"update\", handleNumber);\n      fireEvent(\"change\", handleNumber);\n      fireEvent(\"set\", handleNumber);\n      return false;\n    } // Attach events to several slider parts.\n\n\n    function bindSliderEvents(behaviour) {\n      // Attach the standard drag event to the handles.\n      if (!behaviour.fixed) {\n        scope_Handles.forEach(function (handle, index) {\n          // These events are only bound to the visual handle\n          // element, not the 'real' origin element.\n          attachEvent(actions.start, handle.children[0], eventStart, {\n            handleNumbers: [index]\n          });\n        });\n      } // Attach the tap event to the slider base.\n\n\n      if (behaviour.tap) {\n        attachEvent(actions.start, scope_Base, eventTap, {});\n      } // Fire hover events\n\n\n      if (behaviour.hover) {\n        attachEvent(actions.move, scope_Base, eventHover, {\n          hover: true\n        });\n      } // Make the range draggable.\n\n\n      if (behaviour.drag) {\n        scope_Connects.forEach(function (connect, index) {\n          if (connect === false || index === 0 || index === scope_Connects.length - 1) {\n            return;\n          }\n\n          var handleBefore = scope_Handles[index - 1];\n          var handleAfter = scope_Handles[index];\n          var eventHolders = [connect];\n          addClass(connect, options.cssClasses.draggable); // When the range is fixed, the entire range can\n          // be dragged by the handles. The handle in the first\n          // origin will propagate the start event upward,\n          // but it needs to be bound manually on the other.\n\n          if (behaviour.fixed) {\n            eventHolders.push(handleBefore.children[0]);\n            eventHolders.push(handleAfter.children[0]);\n          }\n\n          eventHolders.forEach(function (eventHolder) {\n            attachEvent(actions.start, eventHolder, eventStart, {\n              handles: [handleBefore, handleAfter],\n              handleNumbers: [index - 1, index]\n            });\n          });\n        });\n      }\n    } // Attach an event to this slider, possibly including a namespace\n\n\n    function bindEvent(namespacedEvent, callback) {\n      scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];\n      scope_Events[namespacedEvent].push(callback); // If the event bound is 'update,' fire it immediately for all handles.\n\n      if (namespacedEvent.split(\".\")[0] === \"update\") {\n        scope_Handles.forEach(function (a, index) {\n          fireEvent(\"update\", index);\n        });\n      }\n    } // Undo attachment of event\n\n\n    function removeEvent(namespacedEvent) {\n      var event = namespacedEvent && namespacedEvent.split(\".\")[0];\n      var namespace = event && namespacedEvent.substring(event.length);\n      Object.keys(scope_Events).forEach(function (bind) {\n        var tEvent = bind.split(\".\")[0];\n        var tNamespace = bind.substring(tEvent.length);\n\n        if ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {\n          delete scope_Events[bind];\n        }\n      });\n    } // External event handling\n\n\n    function fireEvent(eventName, handleNumber, tap) {\n      Object.keys(scope_Events).forEach(function (targetEvent) {\n        var eventType = targetEvent.split(\".\")[0];\n\n        if (eventName === eventType) {\n          scope_Events[targetEvent].forEach(function (callback) {\n            callback.call( // Use the slider public API as the scope ('this')\n            scope_Self, // Return values as array, so arg_1[arg_2] is always valid.\n            scope_Values.map(options.format.to), // Handle index, 0 or 1\n            handleNumber, // Un-formatted slider values\n            scope_Values.slice(), // Event is fired by tap, true or false\n            tap || false, // Left offset of the handle, in relation to the slider\n            scope_Locations.slice(), // add the slider public API to an accessible parameter when this is unavailable\n            scope_Self);\n          });\n        }\n      });\n    } // Split out the handle positioning logic so the Move event can use it, too\n\n\n    function checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward, getValue) {\n      var distance; // For sliders with multiple handles, limit movement to the other handle.\n      // Apply the margin option by adding it to the handle positions.\n\n      if (scope_Handles.length > 1 && !options.events.unconstrained) {\n        if (lookBackward && handleNumber > 0) {\n          distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.margin, 0);\n          to = Math.max(to, distance);\n        }\n\n        if (lookForward && handleNumber < scope_Handles.length - 1) {\n          distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.margin, 1);\n          to = Math.min(to, distance);\n        }\n      } // The limit option has the opposite effect, limiting handles to a\n      // maximum distance from another. Limit must be > 0, as otherwise\n      // handles would be unmovable.\n\n\n      if (scope_Handles.length > 1 && options.limit) {\n        if (lookBackward && handleNumber > 0) {\n          distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.limit, 0);\n          to = Math.min(to, distance);\n        }\n\n        if (lookForward && handleNumber < scope_Handles.length - 1) {\n          distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.limit, 1);\n          to = Math.max(to, distance);\n        }\n      } // The padding option keeps the handles a certain distance from the\n      // edges of the slider. Padding must be > 0.\n\n\n      if (options.padding) {\n        if (handleNumber === 0) {\n          distance = scope_Spectrum.getAbsoluteDistance(0, options.padding[0], 0);\n          to = Math.max(to, distance);\n        }\n\n        if (handleNumber === scope_Handles.length - 1) {\n          distance = scope_Spectrum.getAbsoluteDistance(100, options.padding[1], 1);\n          to = Math.min(to, distance);\n        }\n      }\n\n      to = scope_Spectrum.getStep(to); // Limit percentage to the 0 - 100 range\n\n      to = limit(to); // Return false if handle can't move\n\n      if (to === reference[handleNumber] && !getValue) {\n        return false;\n      }\n\n      return to;\n    } // Uses slider orientation to create CSS rules. a = base value;\n\n\n    function inRuleOrder(v, a) {\n      var o = options.ort;\n      return (o ? a : v) + \", \" + (o ? v : a);\n    } // Moves handle(s) by a percentage\n    // (bool, % to move, [% where handle started, ...], [index in scope_Handles, ...])\n\n\n    function moveHandles(upward, proposal, locations, handleNumbers) {\n      var proposals = locations.slice();\n      var b = [!upward, upward];\n      var f = [upward, !upward]; // Copy handleNumbers so we don't change the dataset\n\n      handleNumbers = handleNumbers.slice(); // Check to see which handle is 'leading'.\n      // If that one can't move the second can't either.\n\n      if (upward) {\n        handleNumbers.reverse();\n      } // Step 1: get the maximum percentage that any of the handles can move\n\n\n      if (handleNumbers.length > 1) {\n        handleNumbers.forEach(function (handleNumber, o) {\n          var to = checkHandlePosition(proposals, handleNumber, proposals[handleNumber] + proposal, b[o], f[o], false); // Stop if one of the handles can't move.\n\n          if (to === false) {\n            proposal = 0;\n          } else {\n            proposal = to - proposals[handleNumber];\n            proposals[handleNumber] = to;\n          }\n        });\n      } // If using one handle, check backward AND forward\n      else {\n          b = f = [true];\n        }\n\n      var state = false; // Step 2: Try to set the handles with the found percentage\n\n      handleNumbers.forEach(function (handleNumber, o) {\n        state = setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o]) || state;\n      }); // Step 3: If a handle moved, fire events\n\n      if (state) {\n        handleNumbers.forEach(function (handleNumber) {\n          fireEvent(\"update\", handleNumber);\n          fireEvent(\"slide\", handleNumber);\n        });\n      }\n    } // Takes a base value and an offset. This offset is used for the connect bar size.\n    // In the initial design for this feature, the origin element was 1% wide.\n    // Unfortunately, a rounding bug in Chrome makes it impossible to implement this feature\n    // in this manner: https://bugs.chromium.org/p/chromium/issues/detail?id=798223\n\n\n    function transformDirection(a, b) {\n      return options.dir ? 100 - a - b : a;\n    } // Updates scope_Locations and scope_Values, updates visual state\n\n\n    function updateHandlePosition(handleNumber, to) {\n      // Update locations.\n      scope_Locations[handleNumber] = to; // Convert the value to the slider stepping/range.\n\n      scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);\n      var translation = 10 * (transformDirection(to, 0) - scope_DirOffset);\n      var translateRule = \"translate(\" + inRuleOrder(translation + \"%\", \"0\") + \")\";\n      scope_Handles[handleNumber].style[options.transformRule] = translateRule;\n      updateConnect(handleNumber);\n      updateConnect(handleNumber + 1);\n    } // Handles before the slider middle are stacked later = higher,\n    // Handles after the middle later is lower\n    // [[7] [8] .......... | .......... [5] [4]\n\n\n    function setZindex() {\n      scope_HandleNumbers.forEach(function (handleNumber) {\n        var dir = scope_Locations[handleNumber] > 50 ? -1 : 1;\n        var zIndex = 3 + (scope_Handles.length + dir * handleNumber);\n        scope_Handles[handleNumber].style.zIndex = zIndex;\n      });\n    } // Test suggested values and apply margin, step.\n\n\n    function setHandle(handleNumber, to, lookBackward, lookForward) {\n      to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward, false);\n\n      if (to === false) {\n        return false;\n      }\n\n      updateHandlePosition(handleNumber, to);\n      return true;\n    } // Updates style attribute for connect nodes\n\n\n    function updateConnect(index) {\n      // Skip connects set to false\n      if (!scope_Connects[index]) {\n        return;\n      }\n\n      var l = 0;\n      var h = 100;\n\n      if (index !== 0) {\n        l = scope_Locations[index - 1];\n      }\n\n      if (index !== scope_Connects.length - 1) {\n        h = scope_Locations[index];\n      } // We use two rules:\n      // 'translate' to change the left/top offset;\n      // 'scale' to change the width of the element;\n      // As the element has a width of 100%, a translation of 100% is equal to 100% of the parent (.noUi-base)\n\n\n      var connectWidth = h - l;\n      var translateRule = \"translate(\" + inRuleOrder(transformDirection(l, connectWidth) + \"%\", \"0\") + \")\";\n      var scaleRule = \"scale(\" + inRuleOrder(connectWidth / 100, \"1\") + \")\";\n      scope_Connects[index].style[options.transformRule] = translateRule + \" \" + scaleRule;\n    } // Parses value passed to .set method. Returns current value if not parse-able.\n\n\n    function resolveToValue(to, handleNumber) {\n      // Setting with null indicates an 'ignore'.\n      // Inputting 'false' is invalid.\n      if (to === null || to === false || to === undefined) {\n        return scope_Locations[handleNumber];\n      } // If a formatted number was passed, attempt to decode it.\n\n\n      if (typeof to === \"number\") {\n        to = String(to);\n      }\n\n      to = options.format.from(to);\n      to = scope_Spectrum.toStepping(to); // If parsing the number failed, use the current value.\n\n      if (to === false || isNaN(to)) {\n        return scope_Locations[handleNumber];\n      }\n\n      return to;\n    } // Set the slider value.\n\n\n    function valueSet(input, fireSetEvent) {\n      var values = asArray(input);\n      var isInit = scope_Locations[0] === undefined; // Event fires by default\n\n      fireSetEvent = fireSetEvent === undefined ? true : !!fireSetEvent; // Animation is optional.\n      // Make sure the initial values were set before using animated placement.\n\n      if (options.animate && !isInit) {\n        addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);\n      } // First pass, without lookAhead but with lookBackward. Values are set from left to right.\n\n\n      scope_HandleNumbers.forEach(function (handleNumber) {\n        setHandle(handleNumber, resolveToValue(values[handleNumber], handleNumber), true, false);\n      });\n      var i = scope_HandleNumbers.length === 1 ? 0 : 1; // Secondary passes. Now that all base values are set, apply constraints.\n      // Iterate all handles to ensure constraints are applied for the entire slider (Issue #1009)\n\n      for (; i < scope_HandleNumbers.length; ++i) {\n        scope_HandleNumbers.forEach(function (handleNumber) {\n          setHandle(handleNumber, scope_Locations[handleNumber], true, true);\n        });\n      }\n\n      setZindex();\n      scope_HandleNumbers.forEach(function (handleNumber) {\n        fireEvent(\"update\", handleNumber); // Fire the event only for handles that received a new value, as per #579\n\n        if (values[handleNumber] !== null && fireSetEvent) {\n          fireEvent(\"set\", handleNumber);\n        }\n      });\n    } // Reset slider to initial values\n\n\n    function valueReset(fireSetEvent) {\n      valueSet(options.start, fireSetEvent);\n    } // Set value for a single handle\n\n\n    function valueSetHandle(handleNumber, value, fireSetEvent) {\n      // Ensure numeric input\n      handleNumber = Number(handleNumber);\n\n      if (!(handleNumber >= 0 && handleNumber < scope_HandleNumbers.length)) {\n        throw new Error(\"noUiSlider (\" + VERSION + \"): invalid handle number, got: \" + handleNumber);\n      } // Look both backward and forward, since we don't want this handle to \"push\" other handles (#960);\n\n\n      setHandle(handleNumber, resolveToValue(value, handleNumber), true, true);\n      fireEvent(\"update\", handleNumber);\n\n      if (fireSetEvent) {\n        fireEvent(\"set\", handleNumber);\n      }\n    } // Get the slider value.\n\n\n    function valueGet() {\n      var values = scope_Values.map(options.format.to); // If only one handle is used, return a single value.\n\n      if (values.length === 1) {\n        return values[0];\n      }\n\n      return values;\n    } // Removes classes from the root and empties it.\n\n\n    function destroy() {\n      for (var key in options.cssClasses) {\n        if (!options.cssClasses.hasOwnProperty(key)) {\n          continue;\n        }\n\n        removeClass(scope_Target, options.cssClasses[key]);\n      }\n\n      while (scope_Target.firstChild) {\n        scope_Target.removeChild(scope_Target.firstChild);\n      }\n\n      delete scope_Target.noUiSlider;\n    }\n\n    function getNextStepsForHandle(handleNumber) {\n      var location = scope_Locations[handleNumber];\n      var nearbySteps = scope_Spectrum.getNearbySteps(location);\n      var value = scope_Values[handleNumber];\n      var increment = nearbySteps.thisStep.step;\n      var decrement = null; // If snapped, directly use defined step value\n\n      if (options.snap) {\n        return [value - nearbySteps.stepBefore.startValue || null, nearbySteps.stepAfter.startValue - value || null];\n      } // If the next value in this step moves into the next step,\n      // the increment is the start of the next step - the current value\n\n\n      if (increment !== false) {\n        if (value + increment > nearbySteps.stepAfter.startValue) {\n          increment = nearbySteps.stepAfter.startValue - value;\n        }\n      } // If the value is beyond the starting point\n\n\n      if (value > nearbySteps.thisStep.startValue) {\n        decrement = nearbySteps.thisStep.step;\n      } else if (nearbySteps.stepBefore.step === false) {\n        decrement = false;\n      } // If a handle is at the start of a step, it always steps back into the previous step first\n      else {\n          decrement = value - nearbySteps.stepBefore.highestStep;\n        } // Now, if at the slider edges, there is no in/decrement\n\n\n      if (location === 100) {\n        increment = null;\n      } else if (location === 0) {\n        decrement = null;\n      } // As per #391, the comparison for the decrement step can have some rounding issues.\n\n\n      var stepDecimals = scope_Spectrum.countStepDecimals(); // Round per #391\n\n      if (increment !== null && increment !== false) {\n        increment = Number(increment.toFixed(stepDecimals));\n      }\n\n      if (decrement !== null && decrement !== false) {\n        decrement = Number(decrement.toFixed(stepDecimals));\n      }\n\n      return [decrement, increment];\n    } // Get the current step size for the slider.\n\n\n    function getNextSteps() {\n      return scope_HandleNumbers.map(getNextStepsForHandle);\n    } // Updateable: margin, limit, padding, step, range, animate, snap\n\n\n    function updateOptions(optionsToUpdate, fireSetEvent) {\n      // Spectrum is created using the range, snap, direction and step options.\n      // 'snap' and 'step' can be updated.\n      // If 'snap' and 'step' are not passed, they should remain unchanged.\n      var v = valueGet();\n      var updateAble = [\"margin\", \"limit\", \"padding\", \"range\", \"animate\", \"snap\", \"step\", \"format\", \"pips\", \"tooltips\"]; // Only change options that we're actually passed to update.\n\n      updateAble.forEach(function (name) {\n        // Check for undefined. null removes the value.\n        if (optionsToUpdate[name] !== undefined) {\n          originalOptions[name] = optionsToUpdate[name];\n        }\n      });\n      var newOptions = testOptions(originalOptions); // Load new options into the slider state\n\n      updateAble.forEach(function (name) {\n        if (optionsToUpdate[name] !== undefined) {\n          options[name] = newOptions[name];\n        }\n      });\n      scope_Spectrum = newOptions.spectrum; // Limit, margin and padding depend on the spectrum but are stored outside of it. (#677)\n\n      options.margin = newOptions.margin;\n      options.limit = newOptions.limit;\n      options.padding = newOptions.padding; // Update pips, removes existing.\n\n      if (options.pips) {\n        pips(options.pips);\n      } else {\n        removePips();\n      } // Update tooltips, removes existing.\n\n\n      if (options.tooltips) {\n        tooltips();\n      } else {\n        removeTooltips();\n      } // Invalidate the current positioning so valueSet forces an update.\n\n\n      scope_Locations = [];\n      valueSet(optionsToUpdate.start || v, fireSetEvent);\n    } // Initialization steps\n\n\n    function setupSlider() {\n      // Create the base element, initialize HTML and set classes.\n      // Add handles and connect elements.\n      scope_Base = addSlider(scope_Target);\n      addElements(options.connect, scope_Base); // Attach user events.\n\n      bindSliderEvents(options.events); // Use the public value method to set the start values.\n\n      valueSet(options.start);\n\n      if (options.pips) {\n        pips(options.pips);\n      }\n\n      if (options.tooltips) {\n        tooltips();\n      }\n\n      aria();\n    }\n\n    setupSlider(); // noinspection JSUnusedGlobalSymbols\n\n    scope_Self = {\n      destroy: destroy,\n      steps: getNextSteps,\n      on: bindEvent,\n      off: removeEvent,\n      get: valueGet,\n      set: valueSet,\n      setHandle: valueSetHandle,\n      reset: valueReset,\n      // Exposed for unit testing, don't use this in your application.\n      __moveHandles: function (a, b, c) {\n        moveHandles(a, b, scope_Locations, c);\n      },\n      options: originalOptions,\n      // Issue #600, #678\n      updateOptions: updateOptions,\n      target: scope_Target,\n      // Issue #597\n      removePips: removePips,\n      removeTooltips: removeTooltips,\n      getTooltips: function () {\n        return scope_Tooltips;\n      },\n      getOrigins: function () {\n        return scope_Handles;\n      },\n      pips: pips // Issue #594\n\n    };\n    return scope_Self;\n  } // Run the standard initializer\n\n\n  function initialize(target, originalOptions) {\n    if (!target || !target.nodeName) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): create requires a single element, got: \" + target);\n    } // Throw an error if the slider was already initialized.\n\n\n    if (target.noUiSlider) {\n      throw new Error(\"noUiSlider (\" + VERSION + \"): Slider was already initialized.\");\n    } // Test the options and create the slider environment;\n\n\n    var options = testOptions(originalOptions, target);\n    var api = scope(target, options, originalOptions);\n    target.noUiSlider = api;\n    return api;\n  } // Use an object instead of a function for future expandability;\n\n\n  return {\n    // Exposed for unit testing, don't use this in your application.\n    __spectrum: Spectrum,\n    version: VERSION,\n    // A reference to the default classes, allows global changes.\n    // Use the cssClasses option for changes to one slider.\n    cssClasses: cssClasses,\n    create: initialize\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/nouislider/distribute/nouislider.js\n");

/***/ }),

/***/ "./node_modules/wNumb/wNumb.js":
/*!*************************************!*\
  !*** ./node_modules/wNumb/wNumb.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function () {\n  \"use strict\";\n\n  var FormatOptions = [\"decimals\", \"thousand\", \"mark\", \"prefix\", \"suffix\", \"encoder\", \"decoder\", \"negativeBefore\", \"negative\", \"edit\", \"undo\"]; // General\n  // Reverse a string\n\n  function strReverse(a) {\n    return a.split(\"\").reverse().join(\"\");\n  } // Check if a string starts with a specified prefix.\n\n\n  function strStartsWith(input, match) {\n    return input.substring(0, match.length) === match;\n  } // Check is a string ends in a specified suffix.\n\n\n  function strEndsWith(input, match) {\n    return input.slice(-1 * match.length) === match;\n  } // Throw an error if formatting options are incompatible.\n\n\n  function throwEqualError(F, a, b) {\n    if ((F[a] || F[b]) && F[a] === F[b]) {\n      throw new Error(a);\n    }\n  } // Check if a number is finite and not NaN\n\n\n  function isValidNumber(input) {\n    return typeof input === \"number\" && isFinite(input);\n  } // Provide rounding-accurate toFixed method.\n  // Borrowed: http://stackoverflow.com/a/21323330/775265\n\n\n  function toFixed(value, exp) {\n    value = value.toString().split(\"e\");\n    value = Math.round(+(value[0] + \"e\" + (value[1] ? +value[1] + exp : exp)));\n    value = value.toString().split(\"e\");\n    return (+(value[0] + \"e\" + (value[1] ? +value[1] - exp : -exp))).toFixed(exp);\n  } // Formatting\n  // Accept a number as input, output formatted string.\n\n\n  function formatTo(decimals, thousand, mark, prefix, suffix, encoder, decoder, negativeBefore, negative, edit, undo, input) {\n    var originalInput = input,\n        inputIsNegative,\n        inputPieces,\n        inputBase,\n        inputDecimals = \"\",\n        output = \"\"; // Apply user encoder to the input.\n    // Expected outcome: number.\n\n    if (encoder) {\n      input = encoder(input);\n    } // Stop if no valid number was provided, the number is infinite or NaN.\n\n\n    if (!isValidNumber(input)) {\n      return false;\n    } // Rounding away decimals might cause a value of -0\n    // when using very small ranges. Remove those cases.\n\n\n    if (decimals !== false && parseFloat(input.toFixed(decimals)) === 0) {\n      input = 0;\n    } // Formatting is done on absolute numbers,\n    // decorated by an optional negative symbol.\n\n\n    if (input < 0) {\n      inputIsNegative = true;\n      input = Math.abs(input);\n    } // Reduce the number of decimals to the specified option.\n\n\n    if (decimals !== false) {\n      input = toFixed(input, decimals);\n    } // Transform the number into a string, so it can be split.\n\n\n    input = input.toString(); // Break the number on the decimal separator.\n\n    if (input.indexOf(\".\") !== -1) {\n      inputPieces = input.split(\".\");\n      inputBase = inputPieces[0];\n\n      if (mark) {\n        inputDecimals = mark + inputPieces[1];\n      }\n    } else {\n      // If it isn't split, the entire number will do.\n      inputBase = input;\n    } // Group numbers in sets of three.\n\n\n    if (thousand) {\n      inputBase = strReverse(inputBase).match(/.{1,3}/g);\n      inputBase = strReverse(inputBase.join(strReverse(thousand)));\n    } // If the number is negative, prefix with negation symbol.\n\n\n    if (inputIsNegative && negativeBefore) {\n      output += negativeBefore;\n    } // Prefix the number\n\n\n    if (prefix) {\n      output += prefix;\n    } // Normal negative option comes after the prefix. Defaults to '-'.\n\n\n    if (inputIsNegative && negative) {\n      output += negative;\n    } // Append the actual number.\n\n\n    output += inputBase;\n    output += inputDecimals; // Apply the suffix.\n\n    if (suffix) {\n      output += suffix;\n    } // Run the output through a user-specified post-formatter.\n\n\n    if (edit) {\n      output = edit(output, originalInput);\n    } // All done.\n\n\n    return output;\n  } // Accept a sting as input, output decoded number.\n\n\n  function formatFrom(decimals, thousand, mark, prefix, suffix, encoder, decoder, negativeBefore, negative, edit, undo, input) {\n    var originalInput = input,\n        inputIsNegative,\n        output = \"\"; // User defined pre-decoder. Result must be a non empty string.\n\n    if (undo) {\n      input = undo(input);\n    } // Test the input. Can't be empty.\n\n\n    if (!input || typeof input !== \"string\") {\n      return false;\n    } // If the string starts with the negativeBefore value: remove it.\n    // Remember is was there, the number is negative.\n\n\n    if (negativeBefore && strStartsWith(input, negativeBefore)) {\n      input = input.replace(negativeBefore, \"\");\n      inputIsNegative = true;\n    } // Repeat the same procedure for the prefix.\n\n\n    if (prefix && strStartsWith(input, prefix)) {\n      input = input.replace(prefix, \"\");\n    } // And again for negative.\n\n\n    if (negative && strStartsWith(input, negative)) {\n      input = input.replace(negative, \"\");\n      inputIsNegative = true;\n    } // Remove the suffix.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\n\n\n    if (suffix && strEndsWith(input, suffix)) {\n      input = input.slice(0, -1 * suffix.length);\n    } // Remove the thousand grouping.\n\n\n    if (thousand) {\n      input = input.split(thousand).join(\"\");\n    } // Set the decimal separator back to period.\n\n\n    if (mark) {\n      input = input.replace(mark, \".\");\n    } // Prepend the negative symbol.\n\n\n    if (inputIsNegative) {\n      output += \"-\";\n    } // Add the number\n\n\n    output += input; // Trim all non-numeric characters (allow '.' and '-');\n\n    output = output.replace(/[^0-9\\.\\-.]/g, \"\"); // The value contains no parse-able number.\n\n    if (output === \"\") {\n      return false;\n    } // Covert to number.\n\n\n    output = Number(output); // Run the user-specified post-decoder.\n\n    if (decoder) {\n      output = decoder(output);\n    } // Check is the output is valid, otherwise: return false.\n\n\n    if (!isValidNumber(output)) {\n      return false;\n    }\n\n    return output;\n  } // Framework\n  // Validate formatting options\n\n\n  function validate(inputOptions) {\n    var i,\n        optionName,\n        optionValue,\n        filteredOptions = {};\n\n    if (inputOptions[\"suffix\"] === undefined) {\n      inputOptions[\"suffix\"] = inputOptions[\"postfix\"];\n    }\n\n    for (i = 0; i < FormatOptions.length; i += 1) {\n      optionName = FormatOptions[i];\n      optionValue = inputOptions[optionName];\n\n      if (optionValue === undefined) {\n        // Only default if negativeBefore isn't set.\n        if (optionName === \"negative\" && !filteredOptions.negativeBefore) {\n          filteredOptions[optionName] = \"-\"; // Don't set a default for mark when 'thousand' is set.\n        } else if (optionName === \"mark\" && filteredOptions.thousand !== \".\") {\n          filteredOptions[optionName] = \".\";\n        } else {\n          filteredOptions[optionName] = false;\n        } // Floating points in JS are stable up to 7 decimals.\n\n      } else if (optionName === \"decimals\") {\n        if (optionValue >= 0 && optionValue < 8) {\n          filteredOptions[optionName] = optionValue;\n        } else {\n          throw new Error(optionName);\n        } // These options, when provided, must be functions.\n\n      } else if (optionName === \"encoder\" || optionName === \"decoder\" || optionName === \"edit\" || optionName === \"undo\") {\n        if (typeof optionValue === \"function\") {\n          filteredOptions[optionName] = optionValue;\n        } else {\n          throw new Error(optionName);\n        } // Other options are strings.\n\n      } else {\n        if (typeof optionValue === \"string\") {\n          filteredOptions[optionName] = optionValue;\n        } else {\n          throw new Error(optionName);\n        }\n      }\n    } // Some values can't be extracted from a\n    // string if certain combinations are present.\n\n\n    throwEqualError(filteredOptions, \"mark\", \"thousand\");\n    throwEqualError(filteredOptions, \"prefix\", \"negative\");\n    throwEqualError(filteredOptions, \"prefix\", \"negativeBefore\");\n    return filteredOptions;\n  } // Pass all options as function arguments\n\n\n  function passAll(options, method, input) {\n    var i,\n        args = []; // Add all options in order of FormatOptions\n\n    for (i = 0; i < FormatOptions.length; i += 1) {\n      args.push(options[FormatOptions[i]]);\n    } // Append the input, then call the method, presenting all\n    // options as arguments.\n\n\n    args.push(input);\n    return method.apply(\"\", args);\n  }\n\n  function wNumb(options) {\n    if (!(this instanceof wNumb)) {\n      return new wNumb(options);\n    }\n\n    if (typeof options !== \"object\") {\n      return;\n    }\n\n    options = validate(options); // Call 'formatTo' with proper arguments.\n\n    this.to = function (input) {\n      return passAll(options, formatTo, input);\n    }; // Call 'formatFrom' with proper arguments.\n\n\n    this.from = function (input) {\n      return passAll(options, formatFrom, input);\n    };\n  }\n\n  return wNumb;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/wNumb/wNumb.js\n");

/***/ })

/******/ });